{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Benvenuti! \u00b6","title":"Home"},{"location":"#benvenuti","text":"","title":"Benvenuti!"},{"location":"01_open_source_making/01_hacker/","text":"il software libero \u00b6 l'hardware libero \u00b6 il making \u00b6 Il software libero \u00b6 TODO: vanno concentrati in un'unica lezione, troppo prolisso Iniziamo il nostro viaggio alla scoperta di Arduino parlando del concetto \"sottostante\" all'intero fenomeno, ovvero quello dell' open source . Per farlo, partiremo dagli anni '60, quando un gruppo di ricercatori e studenti del MIT iniviava l'esplorazione delle sconfinate lande del sapere virtuale, creando quella che negli anni successivi sarebbe stata conosciuta come cultura hacker . La cultura hacker \u00b6 Il termine hacker deriva da una parola del diciassettesimo secolo, indicante un lavoratore che, in maniera pi\u00f9 o meno vigorosa, curava il terreno mediante la sua zappa. Ovviamente, per\u00f2, non \u00e8 questo il concetto che abbiamo in mente quando pensiamo ad un hacker! Dalla fine della seconda guerra mondiale in poi, e specialmente a seguito della creazione dei primi computer ENIAC, alcuni dei primi programmatori, che erano principalmente matematici, fisici o ingegneri, iniziarono a coltivare una vera e propria passione per la loro nascente professione. C'era una crescente ricerca di uno stile di programmazione elegante e ricercato : questa ricerca port\u00f2, verso l'inizio degli anni '60, ad utilizzare il termine hacker per descrivere dei programmatori particolarmente abili, che godevano della sfida legata al ricercare modi innovativi per aggirare i limiti dei sistemi dell'epoca, provando contestualmente a migliorare le loro abilit\u00e0. All'epoca, per\u00f2, i meccanismi di comunicazione non erano paragonabili a quelli odierni. Ci\u00f2 comport\u00f2 la nascita di diverse \"subculture\" hacker, indipendenti e parallele, spesso non consapevoli le une delle altre. Tutte per\u00f2 avevano diverse caratteristiche in comune, tra cui le pi\u00f9 notevoli erano sicuramente la condivisione della conoscenza, una (non troppo velata) ostilit\u00e0 verso la segretezza e l'autorit\u00e0, ed una certa predisposizione all'humor. Le diverse subculture hacker nascevano normalmente negli ambienti accademici: l'AI Lab del MIT, la University of California, Berkeley e la Carnegie Mellon University erano rinomante per essere dei terreni fertili per gli hacker. Il primo \"contatto\" tra le diverse culture avvenne con l'avvento di ARPANET, nel 1969. In particolare, il focus venne portato verso un PDP-10 del MIT, che non implementava il software fornito da DEC, ma un sistema operativo interamente scritto dagli hacker al MIT, ovvero ITS (acronimo che sta per Incompatible Timesharing System ). Il fatto che i ragazzi del MIT avessero creato il loro sistema operativo d\u00e0 una buona idea dell'attitudine degli hacker: non si accontentano delle tecniche standard, ma vogliono che lavorino come dicono loro. ARPANET fece in modo che le mailing list elettroniche venissero usate per sviluppare la cooperazione tra gruppi di interesse remoti, ed usata anche per scopi sociali e ricreativi. La DARPA, che aveva sviluppato ARPANET, chiudeva un occhio su tutte queste attivit\u00e0, considerate \"non autorizzate\": capiva che l'overhead extra da sopportare era un piccolo prezzo da pagare per attirare un'intera generazione di menti brillante nell'ambito del computing. Altre influenze importanti furono gli sviluppi apportati da XEROX PARC, ovvero il Palo Alto Research Center di XEROX, che tra l'inizio degli anni '70 e la met\u00e0 degli anni '80 port\u00f2 un gran volume di innovazioni hardware e software. Ci\u00f2 che usiamo normalmente al giorno d'oggi, inclusi mouse, interfacce grafiche e stampanti laser, oltre che le LAN, vennero inventate dal PARC. Importantissima fu anche l'ascesa del movimento del software libero, di cui parleremo estesamente pi\u00f9 avanti: la community dei diversi gruppi hacker si un\u00ec, raggiungendo la \"massa critica\" che le permetteva di incoraggiare la diffusione dell'etica hacker , che port\u00f2 all'adozione di uno slang comune ed una visione condivisa della societ\u00e0, in modo simile a quanto avviene per altri gruppi e comunit\u00e0, ma in maniera sicuramente pi\u00f9 informale. I testi cardine \u00b6 La cultura hacker ha diversi testi \"cardine\", che ne rappresentano i punti fondamentali. Jargon File \u00b6 Il Jargon File , la cui prima versione venne redatta da Raphael Finkel nel 1975, \u00e8 una sorta di \"glossario\" che racchiude i pi\u00f9 importanti termini usati nello slang dei programmatori. Originariamente, era una semplice collezione di termini da culture \"tecniche\", come l'AI Lab del MIT, il SAIL (Stanford AI Lab) ed altri facenti parte delle community ARPANET AI/LISP/PDP-10. Il Jargon File venne poi rivisto nel 1983, e pubblicato come The Hacker's Dictionary da Guy Steele, e poi nel 1991, nel The New Hacker's Dictionary . Il file venne comunque concepito negli anni '50 dal Tech Model Railroad Club del MIT. CatB \u00b6 CatB (il cui nome completo \u00e8 in realt\u00e0 The Cathedral and the Bazaar: Musings on Linux and Open Source by an Accidental Revolutionary ) \u00e8 un saggio pubblicato da Eric Raymond nel 1997, e focalizzato sul contrasto tra due diversi modelli di sviluppo del software libero: il primo \u00e8 il modello Cathedral , nel quale il codice sorgente \u00e8 disponibile ad ogni release del software, ma quello tra le release (ovvero il codice di sviluppo) \u00e8 disponibile soltanto agli sviluppatori, mentre il secondo \u00e8 il modello Bazaar , nel quale il codice \u00e8 sviluppato in Internet e visibile dal pubblico. Esempi notevoli di codice Cathedral sono GCC ed Emacs, mentre l'esempio maggiormente conosciuto di software Bazaar \u00e8 Linux. Nel saggio, Raymond afferma che il modello migliore \u00e8 il secondo: tutto \u00e8 sotto gli occhi di tutti, il che facilita la scoperta e correzione di bug e comportamenti inattesi; ed \u00e8 in realt\u00e0 questo il modello che \u00e8 andato affermandosi al giorno d'oggi (pensiamo al funzionamento di repository come GitHub). Il GNU Manifesto \u00b6 Il manfiesto GNU venne scritto da Stallman per aumentare il supporto al progetto GNU. Nel GNU Manifesto, Stallman elencava quattro principi fondamentali per gli utenti di un software: la libert\u00e0 di eseguire un programma per qualunque scopo , libert\u00e0 di studiare i meccanismi alla base del programma e modificarli , libert\u00e0 di redistribuirne copie, e libert\u00e0 di migliorare e cambiare versioni modificate per l'uso pubblico. Per implementare queste libert\u00e0, gli utenti avevano bisogno di accesso completo al codice. Per assicurarsi che il codice rimanesse libero ed a disposizione del pubblico, Stallman cre\u00f2 la GNU General Public License (GPL), che permetteva ai software ed alle generazioni successive di codice derivate da questo di rimanere libere per l'uso pubblico. Parleremo pi\u00f9 estesamente del manifesto GNU nella sezione dedicata a Richard Stallman.","title":"La cultura hacker"},{"location":"01_open_source_making/01_hacker/#il-software-libero","text":"","title":"il software libero"},{"location":"01_open_source_making/01_hacker/#lhardware-libero","text":"","title":"l'hardware libero"},{"location":"01_open_source_making/01_hacker/#il-making","text":"","title":"il making"},{"location":"01_open_source_making/01_hacker/#il-software-libero_1","text":"TODO: vanno concentrati in un'unica lezione, troppo prolisso Iniziamo il nostro viaggio alla scoperta di Arduino parlando del concetto \"sottostante\" all'intero fenomeno, ovvero quello dell' open source . Per farlo, partiremo dagli anni '60, quando un gruppo di ricercatori e studenti del MIT iniviava l'esplorazione delle sconfinate lande del sapere virtuale, creando quella che negli anni successivi sarebbe stata conosciuta come cultura hacker .","title":"Il software libero"},{"location":"01_open_source_making/01_hacker/#la-cultura-hacker","text":"Il termine hacker deriva da una parola del diciassettesimo secolo, indicante un lavoratore che, in maniera pi\u00f9 o meno vigorosa, curava il terreno mediante la sua zappa. Ovviamente, per\u00f2, non \u00e8 questo il concetto che abbiamo in mente quando pensiamo ad un hacker! Dalla fine della seconda guerra mondiale in poi, e specialmente a seguito della creazione dei primi computer ENIAC, alcuni dei primi programmatori, che erano principalmente matematici, fisici o ingegneri, iniziarono a coltivare una vera e propria passione per la loro nascente professione. C'era una crescente ricerca di uno stile di programmazione elegante e ricercato : questa ricerca port\u00f2, verso l'inizio degli anni '60, ad utilizzare il termine hacker per descrivere dei programmatori particolarmente abili, che godevano della sfida legata al ricercare modi innovativi per aggirare i limiti dei sistemi dell'epoca, provando contestualmente a migliorare le loro abilit\u00e0. All'epoca, per\u00f2, i meccanismi di comunicazione non erano paragonabili a quelli odierni. Ci\u00f2 comport\u00f2 la nascita di diverse \"subculture\" hacker, indipendenti e parallele, spesso non consapevoli le une delle altre. Tutte per\u00f2 avevano diverse caratteristiche in comune, tra cui le pi\u00f9 notevoli erano sicuramente la condivisione della conoscenza, una (non troppo velata) ostilit\u00e0 verso la segretezza e l'autorit\u00e0, ed una certa predisposizione all'humor. Le diverse subculture hacker nascevano normalmente negli ambienti accademici: l'AI Lab del MIT, la University of California, Berkeley e la Carnegie Mellon University erano rinomante per essere dei terreni fertili per gli hacker. Il primo \"contatto\" tra le diverse culture avvenne con l'avvento di ARPANET, nel 1969. In particolare, il focus venne portato verso un PDP-10 del MIT, che non implementava il software fornito da DEC, ma un sistema operativo interamente scritto dagli hacker al MIT, ovvero ITS (acronimo che sta per Incompatible Timesharing System ). Il fatto che i ragazzi del MIT avessero creato il loro sistema operativo d\u00e0 una buona idea dell'attitudine degli hacker: non si accontentano delle tecniche standard, ma vogliono che lavorino come dicono loro. ARPANET fece in modo che le mailing list elettroniche venissero usate per sviluppare la cooperazione tra gruppi di interesse remoti, ed usata anche per scopi sociali e ricreativi. La DARPA, che aveva sviluppato ARPANET, chiudeva un occhio su tutte queste attivit\u00e0, considerate \"non autorizzate\": capiva che l'overhead extra da sopportare era un piccolo prezzo da pagare per attirare un'intera generazione di menti brillante nell'ambito del computing. Altre influenze importanti furono gli sviluppi apportati da XEROX PARC, ovvero il Palo Alto Research Center di XEROX, che tra l'inizio degli anni '70 e la met\u00e0 degli anni '80 port\u00f2 un gran volume di innovazioni hardware e software. Ci\u00f2 che usiamo normalmente al giorno d'oggi, inclusi mouse, interfacce grafiche e stampanti laser, oltre che le LAN, vennero inventate dal PARC. Importantissima fu anche l'ascesa del movimento del software libero, di cui parleremo estesamente pi\u00f9 avanti: la community dei diversi gruppi hacker si un\u00ec, raggiungendo la \"massa critica\" che le permetteva di incoraggiare la diffusione dell'etica hacker , che port\u00f2 all'adozione di uno slang comune ed una visione condivisa della societ\u00e0, in modo simile a quanto avviene per altri gruppi e comunit\u00e0, ma in maniera sicuramente pi\u00f9 informale.","title":"La cultura hacker"},{"location":"01_open_source_making/01_hacker/#i-testi-cardine","text":"La cultura hacker ha diversi testi \"cardine\", che ne rappresentano i punti fondamentali.","title":"I testi cardine"},{"location":"01_open_source_making/01_hacker/#jargon-file","text":"Il Jargon File , la cui prima versione venne redatta da Raphael Finkel nel 1975, \u00e8 una sorta di \"glossario\" che racchiude i pi\u00f9 importanti termini usati nello slang dei programmatori. Originariamente, era una semplice collezione di termini da culture \"tecniche\", come l'AI Lab del MIT, il SAIL (Stanford AI Lab) ed altri facenti parte delle community ARPANET AI/LISP/PDP-10. Il Jargon File venne poi rivisto nel 1983, e pubblicato come The Hacker's Dictionary da Guy Steele, e poi nel 1991, nel The New Hacker's Dictionary . Il file venne comunque concepito negli anni '50 dal Tech Model Railroad Club del MIT.","title":"Jargon File"},{"location":"01_open_source_making/01_hacker/#catb","text":"CatB (il cui nome completo \u00e8 in realt\u00e0 The Cathedral and the Bazaar: Musings on Linux and Open Source by an Accidental Revolutionary ) \u00e8 un saggio pubblicato da Eric Raymond nel 1997, e focalizzato sul contrasto tra due diversi modelli di sviluppo del software libero: il primo \u00e8 il modello Cathedral , nel quale il codice sorgente \u00e8 disponibile ad ogni release del software, ma quello tra le release (ovvero il codice di sviluppo) \u00e8 disponibile soltanto agli sviluppatori, mentre il secondo \u00e8 il modello Bazaar , nel quale il codice \u00e8 sviluppato in Internet e visibile dal pubblico. Esempi notevoli di codice Cathedral sono GCC ed Emacs, mentre l'esempio maggiormente conosciuto di software Bazaar \u00e8 Linux. Nel saggio, Raymond afferma che il modello migliore \u00e8 il secondo: tutto \u00e8 sotto gli occhi di tutti, il che facilita la scoperta e correzione di bug e comportamenti inattesi; ed \u00e8 in realt\u00e0 questo il modello che \u00e8 andato affermandosi al giorno d'oggi (pensiamo al funzionamento di repository come GitHub).","title":"CatB"},{"location":"01_open_source_making/01_hacker/#il-gnu-manifesto","text":"Il manfiesto GNU venne scritto da Stallman per aumentare il supporto al progetto GNU. Nel GNU Manifesto, Stallman elencava quattro principi fondamentali per gli utenti di un software: la libert\u00e0 di eseguire un programma per qualunque scopo , libert\u00e0 di studiare i meccanismi alla base del programma e modificarli , libert\u00e0 di redistribuirne copie, e libert\u00e0 di migliorare e cambiare versioni modificate per l'uso pubblico. Per implementare queste libert\u00e0, gli utenti avevano bisogno di accesso completo al codice. Per assicurarsi che il codice rimanesse libero ed a disposizione del pubblico, Stallman cre\u00f2 la GNU General Public License (GPL), che permetteva ai software ed alle generazioni successive di codice derivate da questo di rimanere libere per l'uso pubblico. Parleremo pi\u00f9 estesamente del manifesto GNU nella sezione dedicata a Richard Stallman.","title":"Il GNU Manifesto"},{"location":"01_open_source_making/02_gnu/","text":"Gnu (is Not Unix) \u00b6 Richard Stallman: nascita di un mito \u00b6 Uno dei pi\u00f9 importanti contributi alla definizione della cultura dell'open source si deve alla carismatica figura di Richard Stallman, che rappresenta in tutto e per tutto l'archetipo dell'hacker. Stallman era un ragazzo prodigio: all'et\u00e0 di 17 anni frequentava il suo primo anno di universit\u00e0 ad Harvard, mostrando le sue qualit\u00e0 in corsi come il famigerato Math 55 , noto per \"condensare\" quattro anni di insegnamenti in due soli semestri, e considerato come uno dei corsi di matematica pi\u00f9 difficili al mondo (se non il pi\u00f9 difficile ). Nel 1971, a 18 anni, inizi\u00f2 a frequentare il MIT, specializzandosi nell'arte della programmazione ed iniziando a frequentare la comunit\u00e0 hacker dell'Istituto di Boston, dove venne conosciuto con il (non troppo originale) nickname di RMS. In seguito, Stallman inizi\u00f2 a lavorare come ricercatore all'AI Lab, occupandosi di tematiche prevalentemente legate all'intelligenza artificiale e contribuendo, assieme a Gerry Sussman, alla definizione di un famoso approccio al ragionamento automatico , ancora molto citato al giorno d'oggi. La deriva della cultura hacker \u00b6 L'alba del software proprietario \u00b6 Stallman era anche noto per la sua forte ostilit\u00e0 alle restrizioni che venivano poste all'accesso alla conoscenza: Richard voleva che i computer del MIT fossero sempre disponibili a chiunque, ed arriv\u00f2 perfino ad architettare un sistema per decifrare le password degli utenti, i quali venivano poi avvertiti da Stallman, che gli invitava contestualmente a sostituirle con stringhe vuote, permettendo quindi l'accesso a chiunque al computer; purtroppo, il suo avviso venne seguito soltanto da un quinto degli utenti del laboratorio. Questo atteggiamento lo rendeva una sorta di \"paladino\" di quelli che abbiamo gi\u00e0 visto fossero i \"principi\" alla base della cultura hacker che, verso la fine degli anni '70, iniziava a frammentarsi sotto i colpi di un ben noto colpevole: il profitto . La maggior parte dei produttori di computer, infatti, aveva smesso di distribuire il codice sorgente dei propri software, principalmente per evitare che venissero copiati sui computer della concorrenza. Si inizi\u00f2 inoltre a diffondere l'uso di licenze particolarmente restrittive, allo scopo di proebire, o quantomeno limitare, la copia e distribuzione del software proprietario, che stava pian piano diventando la norma. Stallman prese ferocemente posizione contro questa tendenza, arrivando a definire l'utilizzo delle cosiddette time-bombs (ovvero delle funzioni che, in base al tempo di utilizzo, erano in grado di disattivare il software, esattamente come accade per i free trial odierni) un \"crimine contro l'umanit\u00e0\" . Ovviamente, come chiar\u00ec egli stesso in un'intervista del 2008, il crimine non era ricevere un corrispettivo monetario per una prestazione, ma il bloccare l'accesso ad un software ed alla conoscenza derivante. L'addio al MIT \u00b6 L'affaire Xerox \u00b6 Nel 1980, Stallman si vide revocare, assieme ad altri membri dell'AI Lab, l'accesso al sorgente del software di una stampante laser Xerox 9700 appena acquistata dal laboratorio. Il problema era decisamente serio: la stampante era collocata in un ambiente diverso da quello dove si trovavano i suoi utenti, che quindi non potevano sapere se le loro stampe fossero state completate, o se si fosse verificato qualche problema. Per ovviarvi, il software della precedente stampante era stato modificato da Stallman, in maniera che fossero inviati degli appositi messaggi agli utenti indicanti il termine di una stampa o l'insorgenza di problemi pi\u00f9 o meno seri. Ci\u00f2 non era per\u00f2 possibile con la nuova stampante, in quanto il codice non era disponibile. Questo disagio contribu\u00ec a rafforzare in Stallman l'idea della necessit\u00e0 dell'accesso al codice sorgente del software utilizzato. Lisp Machines Inc. e Symbolics \u00b6 Nello stesso periodo, i membri dell'AI Lab crearono la prima Lisp Machine, un computer general-purpose progettato per eseguire in maniera efficiente programmi basati su Lisp. Nello stesso periodo, un altro membro dell'AI Lab, Richard Greenblatt, aveva fondato la Lisp Machine Inc. , per commercializzare le idee ed i prototipi che lui e Tom Knight avevano realizzato in laboratorio. Greenblatt non credeva negli investimenti esterni: pensava infatti che i proventi dell'attivit\u00e0 commerciale dovessero essere reinvestiti in ricerca e sviluppo, permettendo una crescita costante dell'azienda; di contro, altri membri dell'AI Lab pensavano che affidarsi ai fondi provenienti da societ\u00e0 esterne fosse un approccio pi\u00f9 sicuro e, non riuscendo a raggiungere un accordo con Greenblatt, decisero di fondare Symbolics . Symbolics riusc\u00ec a recrutare la maggior parte dei membri dell'AI Lab, facendo anche in modo che Greenblatt non potesse pi\u00f9 citare in alcun modo il MIT. Entrambe le compagnie producevano software proprietario: tuttavia, Stallman si schier\u00f2 contro Symbolics, dato che LMI non aveva tentato di \"colpire\" Richard Greenblatt, un altro hacker all'AI Lab, aveva fondato la societ\u00e0 Lisp Machines Inc. per mettere sul mercato le macchine Lisp, che lui e Tom Knight avevano progettato in laboratorio. Greenblatt respingeva investimenti esterni, credendo che il processo di costruzione e vendita di alcune macchine potesse essere reivestito con profitto nella crescita della compagnia. Di contro, gli altri hacker pensavano che l'approccio basato sugli investitori fosse migliore. Dato che on si riusciva a raggiungere un accordo, gli altri hacker fondarono Symbolics, con l'aiuto di Russ Noftsker, un amministratore dell'AI Lab. Symbolics recrut\u00f2 la maggiro parte degli hacker rimanenti, incluso Bill Gosper, che quindi lasci\u00f2 l'API Lab. Symbolics forz\u00f2 anche Greenblatt a smettere di citare le policy del MIT. Anche se entrambe le compagnie fornivano software proprietario, Stallman credeva che LMI, a differenza di Symbolic, aveva provato ad evitare di \"colpire\" la comunit\u00e0 del lab. Per due anni, dal 1982 fino alla fine del 1983, Stallman lavor\u00f2 da solo per clonare l'output dei programmatori di Symbolics, con l'obiettivo di prevenire a questi di ottenere un monopolio sui computer del laboratorio. Uno degli argomenti principali di Stallman era che gli utilizzatori del software dovrebbero avere la libert\u00e0 di condividerlo con i loro vicini ed essere in grado di studiare e fare cambi al softawre che usano, affermava inoltre che i venditori di software compivano atti antisociali e non etici. La frase software wants to be free \u00e8 spesso attribuita non correttaemtne a lui, e Stallman afferma che questo sia un'interpretazione non buona della sua filosofia. Uno dei suoi punti di vista era che la libert\u00e0 \u00e8 vitale per la libert\u00e0 degli utenti e della societ\u00e0 come valore morale, e non solamente per ragioni pragmatiche come la possiblit\u00e0 di sviluppare software tecnicamente superiore. Eric S. Rayomnd, uno dei creatori del movimento open-source, diceva per\u00f2 che gli argomenti morali, piuttosto che quelli pragmatici, alienano potenziali alleati e colpiscono il fine di rimuovere la secretezza nel codice. Nel febbraio 1984, Stallman lasci\u00f2 il suo lavoro al MIT per lavorare a tempo pieno sul progetto GNU, che aveva annunciato nel settembre del 1983. Da quel momento, rimane affiliato con il mIT come visiting scientist non pagato al Computer Science and Artificial Intelligence Laboratory. Fino al '98, aveva mantenuto un ufficio al MIT. Il progetto GNU \u00b6 Origini \u00b6 Richard Stallman annunci\u00f2 il suo intento di iniziare a lavorare sul progetto GNU in un messaggio Usenet nel settembre del 1983, che \u00e8 possibile ritrovare qui . Nel messaggio, Stallman annunciava la sua volont\u00e0 di creare il progetto GNU (Gnu's Not Unix), e renderlo disponibile a chiunque fosse in grado di utilizzarlo: Richard Stallman sul progetto GNU: Starting this Thanksgiving, I am going to write a complete Unix-compatible software system called GNU (for Gnu's Not Unix), and give it away free to everyone who can use it. Richard indicava anche il motivo alla base della creazione del progetto: Il perch\u00e9 del progetto GNU: I consider that the golden rule requires that if I like a program I must share it with other people who like it. [...] I have decided to put together a sufficient body of free software so that I will be able to get along without any software that is not free. Quando GNU venne iniziato, aveva un editor testuale Emacs per Lisp per scrivere comandi, un debugger di codice sorgente, un parser generator compatibile con yacc, ed un linker. Il sistema GNU richiedeva che il compilatore C ed i tool che venivano utilizzati fossero liberi, per cui anche questi furono sviluppati. Per giugno 1987, il progetto aveva accumulato e sviluppato un assembler open source, quasi terminato un compilatore C (GCC), un editor (GNU Emacs) e diverse utility (come ls, grep, awk, make ed ld). Era anche presente un kernel iniziale, che per\u00f2 aveva bisogno di ulteriori aggiornamenti. Una volta che il kernel ed il compilatore furono terminati, GNU fu in grado di essere usata per lo sviluppo software. L'obiettivo principale era creare molte altre applicazioni simili al sistema Unix. GNU era in grado di eseguire programmi Unix, ma non era identica a questo. Incorporava dei nomi dei file pi\u00f9 lunghi, numeri di versione dei file, ed un file system a prova di crash. Il manifesto GNU venne scritto per ottenere supporto e partecipazione esterna al progetto. I programmatori furono incoraggiati a prendere parte ad ogni aspetto del progetto che li interessava. Le persone potevano donare fondi, parti di computer, o anche il loro tempo per scrivere codice e programmi per il progetto. Le origini e lo sviluppo della maggior parte degli aspetti del progetto GNU (e del free software in generale) \u00e8 possibile ritrovarli nell'help di Emacs. C-h g Il manifesto GNU \u00b6 Free Software Foundation \u00b6 La Free Software Foundation (FSF) \u00b6 La Free Software Foundation (FSF) venne fondata da Richard Stallman il 4 ottobre del 1985 come supporto al free software movement , il quale promuoveva come abbiamo gi\u00e0 visto la libert\u00e0 universale di studiare, distribuire, creare e modificare software, possibilmente distribuito secondo termini copyleft (anche detti share-alike ), cos\u00ec come definiti con la GNU General Public License. La FSF venne creata a Boston, dove \u00e8 tuttora situata. Dalla sua fondazione fino alla met\u00e0 degli anni '90, i fondi della FSF vennero usati principalmente per sviluppatori software che scrivessero software libero per il progetto GNU. Dal 1990, gli impiegati della fondazione ed i volontari hanno lavorato per lo pi\u00f9 a parti legali e strutturali per il free software movement e la free software community. La Free Software Foundation (FSF) venne fondata nel 1985 come corporazione no-profit che supporta lo sviluppo di software libero . Ha permesso di continuare i progetti GNU esistenti, cos\u00ec come la vendita di materiale istruttivo, ed ha impiegato gli sviluppatori del software libero. Da quiel momento, ha continuato le sue attivit\u00e0, cos\u00ec come pubblicizzare il software libero. La FSF \u00e8 anche lo steward di diverse licenze per il software libero, il che significa che le pubblica ed ha la possibilit\u00e0 di revisionarle se necessario. La FSF detiene i diritti di diverse parti dei sistemi GNU, come il GCC. Come detentore dei diritti, ha l'autorit\u00e0 di forzare i requisiti di copyleft della GNU General Public License (GPL), quando accadono delle violazioni su questo software. Dal 1991 al 2001, la GPL \u00e8 stata fatta rispsettare in maniera informarle, normalmente da Stallman. Nell'interesse di promuovere il copyleft, ad ogni modo, Harald Welte lanci\u00f2 nel 2004 il sito gpl-violations.org. Nel tardo 2001, il direttore esecuitov della FSF, Bradley M. Kuhn, assieme a Moglen, Daviud Turner e Peter Brown, formalizzarono questi sforzi nella creazione del GPL Compliance Labs . Dal 2002 al 2004, tutte le cause di GPL enforcement di alto profilo, come quelle contro Linksys ed OpenTV, divennero pi\u00f9 frequenti. Il GPL enforcement e le campagne educative sul rispetto della GPL fu uno degli sforzi maggiori durente questo periodo. Nel marzo del 2003, la SCO fece causa contro IBM, dicendo che i contributi ad IBM a diversi software liberi, inclusi alcuni del progetto GNU, violavano i diritti di SCO. FSF venne chiamata in causa a fine 2003, il che comport\u00f2 un sostanziale sforzo per rispondere alla causa, con conseguente impatto negativo sull'adozione e promozione del software libero. Dal 2003 al 2005, la FSF ha tenuto seminari legali per spiegare il GPL e la normativa che lo riguardava. Normalmente erano tenuti da Bradley M. Kuhn e Daniel Ravicher, questi seminari erano il promo sforzo a dare un'educazione formale legale sulla GPL. Nel 2007, la FSF pubblic\u00f2 la terza versione della GNU GPL dopo significative pressioni esterne. Nel dicembre 2008, la FSF ha lanciato una causa legale contro Cisco per l'uso di componenti GPL-licensed con i prodotti Linksys. Cisco \u00e8 stato notificato del problema di licenze nel 2003, ma ripetuttamente ignor\u00f2 gli avvisi. nel maggio 2009, la FSF lasci\u00f2 la causa quando Cisco accett\u00f2 di fare una donazione monetaria ad FSF e defini un Free Software DIrector per condurre review continue delle pratiche di compliance della compagnia alla licenza. Free Software Definition \u00b6 La definizione di Free Software venne pubblicata dalla FSF nel febbraio del 1986, ed ha due punti: Quote \"The word \"free\" in our name does not refer to price; it refers to freedom. First, the freedom to copy a program and redistribute it to your neighbors, so that they can use it as well as you. Second, the freedom to change a program, so that you can control it instead of it controlling you; for this, the source code must be made available to you.\" Nel 1996, quando venne lanciato il sito gnu.org, il free softwre venne definito avere three levels of freedom aggiungendo una menzione esplicita alla libert\u00e0 di sfgudiare il software (che pu\u00f2 essere letta nella definizione originaria come parte della libert\u00e0 di cambiare il programma). Stallman successivamente evit\u00f2 la parola \"livelli\", dicendo che si ha bisogno soltanto di tutta liberta, per cui non va bene pensarci in termini di livelli. Infine, venne aggiunta un'altra libert\u00e0, per indicare esplicitamente che l'utente deve essere in grado di eseguire il programma. Le libert\u00e0 esistenti erano gi\u00e0 numerate dalla uno alla tre, ma questa viene prima delle altre, ed \u00e8 chiamata \"zero\". La definizione moderna ha quindi quattro definizioni: The freedom to run the program as you wish, for any purpose (freedom 0). The freedom to study how the program works, and change it so it does your computing as you wish (freedom 1). Access to the source code is a precondition for this. The freedom to redistribute copies so you can help your neighbor (freedom 2). The freedom to distribute copies of your modified versions to others (freedom 3). By doing this you can give the whole community a chance to benefit from your changes. Access to the source code is a precondition for this. La prima e la terza libert\u00e0 richiedono il sorgente, perch\u00e9 studiare e modificare il software senza il sorgente \u00e8 molto poco pratico (per usare un eufemismo). Progetti ad alta priorit\u00e0 \u00b6 La FSF manitene una lsita di progetti ad alta priorit\u00e0 , dei quali la Fondazione afferma che vi sia un bisogno vitale che la free software community si prenda carico. La FSF considera questi progetti importanti perch\u00e9 gli utenti sono continuamente spinti ad usare software non libero, perch\u00e9 non vi \u00e8 un adeguato rimpiazzo libero. Le task ad alta priorit\u00e0 attuale sono il reverse enginerring di firmware proprietario; il revesible debugging in GNU Debugger, lo sviluppo di software automatico per trascrizione e video editing, Coreboot, driver per router di rete e rimpiazzi per Skyupe, Google Earth, OpenDWG, BitTorrent Sync ed Oracle Forms. Alcuni di quelli del passato riguardavano GNU Classpath, il GNU Compiler per Java, e GNOME. Lo sforzo \u00e8 stato criticato da Michael Larabel per non istigare lo sviluppo attivo o per essere lenti nello sviluppo, anche dopo che certi progetti sono stati aggiunti alla lista. Critiche \u00b6 posizione sul DRM \u00b6 Linus Torvalds ha criticatoi la FSF per usare GPLv3 come arma nella lotta al DRM. Torvals nota che il problema della DRM e quello delle licenze dovrebbero essere separati. Defective by Desiugn \u00b6 Nel giungo 2919 Joe Brockmeier, un giornalista al Linux Magazine, critic\u00f2 la campagna Defective by Design della FSF come \"negativa \" ed infantile e non adeguata per dare agli utenti alternative credibili al softgware propreiatario. La FSF rispose a queste critiche dicendo che \"that there is a fundamental difference between speaking out against policies or actions and smear campaigns\", e che \"that if one is taking an ethical position, it is justified, and often necessary, to not only speak about the benefits of freedom but against acts of dispossession and disenfranchisement.\"[63] GNU LibreDWG license controversy \u00b6 Nel 2009, un aggiornamento di LibDWG/LibreDWG alla versione 3 della GPL ha reso impossibile per i progetti LibreCAD e FreeCad di usare la LibreDWG legalmente. Molti altri si aggiunsero al coro, come Assimp e Blender. Alcuni selezionariono che la scelta di una licenza con una compatibilit\u00e0 pi\u00f9 alta, come MIT, BSD o LGPL 2.1. Questa richiesta \u00e8 stata respinta nel 2012.","title":"Il progetto GNU"},{"location":"01_open_source_making/02_gnu/#gnu-is-not-unix","text":"","title":"Gnu (is Not Unix)"},{"location":"01_open_source_making/02_gnu/#richard-stallman-nascita-di-un-mito","text":"Uno dei pi\u00f9 importanti contributi alla definizione della cultura dell'open source si deve alla carismatica figura di Richard Stallman, che rappresenta in tutto e per tutto l'archetipo dell'hacker. Stallman era un ragazzo prodigio: all'et\u00e0 di 17 anni frequentava il suo primo anno di universit\u00e0 ad Harvard, mostrando le sue qualit\u00e0 in corsi come il famigerato Math 55 , noto per \"condensare\" quattro anni di insegnamenti in due soli semestri, e considerato come uno dei corsi di matematica pi\u00f9 difficili al mondo (se non il pi\u00f9 difficile ). Nel 1971, a 18 anni, inizi\u00f2 a frequentare il MIT, specializzandosi nell'arte della programmazione ed iniziando a frequentare la comunit\u00e0 hacker dell'Istituto di Boston, dove venne conosciuto con il (non troppo originale) nickname di RMS. In seguito, Stallman inizi\u00f2 a lavorare come ricercatore all'AI Lab, occupandosi di tematiche prevalentemente legate all'intelligenza artificiale e contribuendo, assieme a Gerry Sussman, alla definizione di un famoso approccio al ragionamento automatico , ancora molto citato al giorno d'oggi.","title":"Richard Stallman: nascita di un mito"},{"location":"01_open_source_making/02_gnu/#la-deriva-della-cultura-hacker","text":"","title":"La deriva della cultura hacker"},{"location":"01_open_source_making/02_gnu/#lalba-del-software-proprietario","text":"Stallman era anche noto per la sua forte ostilit\u00e0 alle restrizioni che venivano poste all'accesso alla conoscenza: Richard voleva che i computer del MIT fossero sempre disponibili a chiunque, ed arriv\u00f2 perfino ad architettare un sistema per decifrare le password degli utenti, i quali venivano poi avvertiti da Stallman, che gli invitava contestualmente a sostituirle con stringhe vuote, permettendo quindi l'accesso a chiunque al computer; purtroppo, il suo avviso venne seguito soltanto da un quinto degli utenti del laboratorio. Questo atteggiamento lo rendeva una sorta di \"paladino\" di quelli che abbiamo gi\u00e0 visto fossero i \"principi\" alla base della cultura hacker che, verso la fine degli anni '70, iniziava a frammentarsi sotto i colpi di un ben noto colpevole: il profitto . La maggior parte dei produttori di computer, infatti, aveva smesso di distribuire il codice sorgente dei propri software, principalmente per evitare che venissero copiati sui computer della concorrenza. Si inizi\u00f2 inoltre a diffondere l'uso di licenze particolarmente restrittive, allo scopo di proebire, o quantomeno limitare, la copia e distribuzione del software proprietario, che stava pian piano diventando la norma. Stallman prese ferocemente posizione contro questa tendenza, arrivando a definire l'utilizzo delle cosiddette time-bombs (ovvero delle funzioni che, in base al tempo di utilizzo, erano in grado di disattivare il software, esattamente come accade per i free trial odierni) un \"crimine contro l'umanit\u00e0\" . Ovviamente, come chiar\u00ec egli stesso in un'intervista del 2008, il crimine non era ricevere un corrispettivo monetario per una prestazione, ma il bloccare l'accesso ad un software ed alla conoscenza derivante.","title":"L'alba del software proprietario"},{"location":"01_open_source_making/02_gnu/#laddio-al-mit","text":"","title":"L'addio al MIT"},{"location":"01_open_source_making/02_gnu/#laffaire-xerox","text":"Nel 1980, Stallman si vide revocare, assieme ad altri membri dell'AI Lab, l'accesso al sorgente del software di una stampante laser Xerox 9700 appena acquistata dal laboratorio. Il problema era decisamente serio: la stampante era collocata in un ambiente diverso da quello dove si trovavano i suoi utenti, che quindi non potevano sapere se le loro stampe fossero state completate, o se si fosse verificato qualche problema. Per ovviarvi, il software della precedente stampante era stato modificato da Stallman, in maniera che fossero inviati degli appositi messaggi agli utenti indicanti il termine di una stampa o l'insorgenza di problemi pi\u00f9 o meno seri. Ci\u00f2 non era per\u00f2 possibile con la nuova stampante, in quanto il codice non era disponibile. Questo disagio contribu\u00ec a rafforzare in Stallman l'idea della necessit\u00e0 dell'accesso al codice sorgente del software utilizzato.","title":"L'affaire Xerox"},{"location":"01_open_source_making/02_gnu/#lisp-machines-inc-e-symbolics","text":"Nello stesso periodo, i membri dell'AI Lab crearono la prima Lisp Machine, un computer general-purpose progettato per eseguire in maniera efficiente programmi basati su Lisp. Nello stesso periodo, un altro membro dell'AI Lab, Richard Greenblatt, aveva fondato la Lisp Machine Inc. , per commercializzare le idee ed i prototipi che lui e Tom Knight avevano realizzato in laboratorio. Greenblatt non credeva negli investimenti esterni: pensava infatti che i proventi dell'attivit\u00e0 commerciale dovessero essere reinvestiti in ricerca e sviluppo, permettendo una crescita costante dell'azienda; di contro, altri membri dell'AI Lab pensavano che affidarsi ai fondi provenienti da societ\u00e0 esterne fosse un approccio pi\u00f9 sicuro e, non riuscendo a raggiungere un accordo con Greenblatt, decisero di fondare Symbolics . Symbolics riusc\u00ec a recrutare la maggior parte dei membri dell'AI Lab, facendo anche in modo che Greenblatt non potesse pi\u00f9 citare in alcun modo il MIT. Entrambe le compagnie producevano software proprietario: tuttavia, Stallman si schier\u00f2 contro Symbolics, dato che LMI non aveva tentato di \"colpire\" Richard Greenblatt, un altro hacker all'AI Lab, aveva fondato la societ\u00e0 Lisp Machines Inc. per mettere sul mercato le macchine Lisp, che lui e Tom Knight avevano progettato in laboratorio. Greenblatt respingeva investimenti esterni, credendo che il processo di costruzione e vendita di alcune macchine potesse essere reivestito con profitto nella crescita della compagnia. Di contro, gli altri hacker pensavano che l'approccio basato sugli investitori fosse migliore. Dato che on si riusciva a raggiungere un accordo, gli altri hacker fondarono Symbolics, con l'aiuto di Russ Noftsker, un amministratore dell'AI Lab. Symbolics recrut\u00f2 la maggiro parte degli hacker rimanenti, incluso Bill Gosper, che quindi lasci\u00f2 l'API Lab. Symbolics forz\u00f2 anche Greenblatt a smettere di citare le policy del MIT. Anche se entrambe le compagnie fornivano software proprietario, Stallman credeva che LMI, a differenza di Symbolic, aveva provato ad evitare di \"colpire\" la comunit\u00e0 del lab. Per due anni, dal 1982 fino alla fine del 1983, Stallman lavor\u00f2 da solo per clonare l'output dei programmatori di Symbolics, con l'obiettivo di prevenire a questi di ottenere un monopolio sui computer del laboratorio. Uno degli argomenti principali di Stallman era che gli utilizzatori del software dovrebbero avere la libert\u00e0 di condividerlo con i loro vicini ed essere in grado di studiare e fare cambi al softawre che usano, affermava inoltre che i venditori di software compivano atti antisociali e non etici. La frase software wants to be free \u00e8 spesso attribuita non correttaemtne a lui, e Stallman afferma che questo sia un'interpretazione non buona della sua filosofia. Uno dei suoi punti di vista era che la libert\u00e0 \u00e8 vitale per la libert\u00e0 degli utenti e della societ\u00e0 come valore morale, e non solamente per ragioni pragmatiche come la possiblit\u00e0 di sviluppare software tecnicamente superiore. Eric S. Rayomnd, uno dei creatori del movimento open-source, diceva per\u00f2 che gli argomenti morali, piuttosto che quelli pragmatici, alienano potenziali alleati e colpiscono il fine di rimuovere la secretezza nel codice. Nel febbraio 1984, Stallman lasci\u00f2 il suo lavoro al MIT per lavorare a tempo pieno sul progetto GNU, che aveva annunciato nel settembre del 1983. Da quel momento, rimane affiliato con il mIT come visiting scientist non pagato al Computer Science and Artificial Intelligence Laboratory. Fino al '98, aveva mantenuto un ufficio al MIT.","title":"Lisp Machines Inc. e Symbolics"},{"location":"01_open_source_making/02_gnu/#il-progetto-gnu","text":"","title":"Il progetto GNU"},{"location":"01_open_source_making/02_gnu/#origini","text":"Richard Stallman annunci\u00f2 il suo intento di iniziare a lavorare sul progetto GNU in un messaggio Usenet nel settembre del 1983, che \u00e8 possibile ritrovare qui . Nel messaggio, Stallman annunciava la sua volont\u00e0 di creare il progetto GNU (Gnu's Not Unix), e renderlo disponibile a chiunque fosse in grado di utilizzarlo: Richard Stallman sul progetto GNU: Starting this Thanksgiving, I am going to write a complete Unix-compatible software system called GNU (for Gnu's Not Unix), and give it away free to everyone who can use it. Richard indicava anche il motivo alla base della creazione del progetto: Il perch\u00e9 del progetto GNU: I consider that the golden rule requires that if I like a program I must share it with other people who like it. [...] I have decided to put together a sufficient body of free software so that I will be able to get along without any software that is not free. Quando GNU venne iniziato, aveva un editor testuale Emacs per Lisp per scrivere comandi, un debugger di codice sorgente, un parser generator compatibile con yacc, ed un linker. Il sistema GNU richiedeva che il compilatore C ed i tool che venivano utilizzati fossero liberi, per cui anche questi furono sviluppati. Per giugno 1987, il progetto aveva accumulato e sviluppato un assembler open source, quasi terminato un compilatore C (GCC), un editor (GNU Emacs) e diverse utility (come ls, grep, awk, make ed ld). Era anche presente un kernel iniziale, che per\u00f2 aveva bisogno di ulteriori aggiornamenti. Una volta che il kernel ed il compilatore furono terminati, GNU fu in grado di essere usata per lo sviluppo software. L'obiettivo principale era creare molte altre applicazioni simili al sistema Unix. GNU era in grado di eseguire programmi Unix, ma non era identica a questo. Incorporava dei nomi dei file pi\u00f9 lunghi, numeri di versione dei file, ed un file system a prova di crash. Il manifesto GNU venne scritto per ottenere supporto e partecipazione esterna al progetto. I programmatori furono incoraggiati a prendere parte ad ogni aspetto del progetto che li interessava. Le persone potevano donare fondi, parti di computer, o anche il loro tempo per scrivere codice e programmi per il progetto. Le origini e lo sviluppo della maggior parte degli aspetti del progetto GNU (e del free software in generale) \u00e8 possibile ritrovarli nell'help di Emacs. C-h g","title":"Origini"},{"location":"01_open_source_making/02_gnu/#il-manifesto-gnu","text":"","title":"Il manifesto GNU"},{"location":"01_open_source_making/02_gnu/#free-software-foundation","text":"","title":"Free Software Foundation"},{"location":"01_open_source_making/02_gnu/#la-free-software-foundation-fsf","text":"La Free Software Foundation (FSF) venne fondata da Richard Stallman il 4 ottobre del 1985 come supporto al free software movement , il quale promuoveva come abbiamo gi\u00e0 visto la libert\u00e0 universale di studiare, distribuire, creare e modificare software, possibilmente distribuito secondo termini copyleft (anche detti share-alike ), cos\u00ec come definiti con la GNU General Public License. La FSF venne creata a Boston, dove \u00e8 tuttora situata. Dalla sua fondazione fino alla met\u00e0 degli anni '90, i fondi della FSF vennero usati principalmente per sviluppatori software che scrivessero software libero per il progetto GNU. Dal 1990, gli impiegati della fondazione ed i volontari hanno lavorato per lo pi\u00f9 a parti legali e strutturali per il free software movement e la free software community. La Free Software Foundation (FSF) venne fondata nel 1985 come corporazione no-profit che supporta lo sviluppo di software libero . Ha permesso di continuare i progetti GNU esistenti, cos\u00ec come la vendita di materiale istruttivo, ed ha impiegato gli sviluppatori del software libero. Da quiel momento, ha continuato le sue attivit\u00e0, cos\u00ec come pubblicizzare il software libero. La FSF \u00e8 anche lo steward di diverse licenze per il software libero, il che significa che le pubblica ed ha la possibilit\u00e0 di revisionarle se necessario. La FSF detiene i diritti di diverse parti dei sistemi GNU, come il GCC. Come detentore dei diritti, ha l'autorit\u00e0 di forzare i requisiti di copyleft della GNU General Public License (GPL), quando accadono delle violazioni su questo software. Dal 1991 al 2001, la GPL \u00e8 stata fatta rispsettare in maniera informarle, normalmente da Stallman. Nell'interesse di promuovere il copyleft, ad ogni modo, Harald Welte lanci\u00f2 nel 2004 il sito gpl-violations.org. Nel tardo 2001, il direttore esecuitov della FSF, Bradley M. Kuhn, assieme a Moglen, Daviud Turner e Peter Brown, formalizzarono questi sforzi nella creazione del GPL Compliance Labs . Dal 2002 al 2004, tutte le cause di GPL enforcement di alto profilo, come quelle contro Linksys ed OpenTV, divennero pi\u00f9 frequenti. Il GPL enforcement e le campagne educative sul rispetto della GPL fu uno degli sforzi maggiori durente questo periodo. Nel marzo del 2003, la SCO fece causa contro IBM, dicendo che i contributi ad IBM a diversi software liberi, inclusi alcuni del progetto GNU, violavano i diritti di SCO. FSF venne chiamata in causa a fine 2003, il che comport\u00f2 un sostanziale sforzo per rispondere alla causa, con conseguente impatto negativo sull'adozione e promozione del software libero. Dal 2003 al 2005, la FSF ha tenuto seminari legali per spiegare il GPL e la normativa che lo riguardava. Normalmente erano tenuti da Bradley M. Kuhn e Daniel Ravicher, questi seminari erano il promo sforzo a dare un'educazione formale legale sulla GPL. Nel 2007, la FSF pubblic\u00f2 la terza versione della GNU GPL dopo significative pressioni esterne. Nel dicembre 2008, la FSF ha lanciato una causa legale contro Cisco per l'uso di componenti GPL-licensed con i prodotti Linksys. Cisco \u00e8 stato notificato del problema di licenze nel 2003, ma ripetuttamente ignor\u00f2 gli avvisi. nel maggio 2009, la FSF lasci\u00f2 la causa quando Cisco accett\u00f2 di fare una donazione monetaria ad FSF e defini un Free Software DIrector per condurre review continue delle pratiche di compliance della compagnia alla licenza.","title":"La Free Software Foundation (FSF)"},{"location":"01_open_source_making/02_gnu/#free-software-definition","text":"La definizione di Free Software venne pubblicata dalla FSF nel febbraio del 1986, ed ha due punti: Quote \"The word \"free\" in our name does not refer to price; it refers to freedom. First, the freedom to copy a program and redistribute it to your neighbors, so that they can use it as well as you. Second, the freedom to change a program, so that you can control it instead of it controlling you; for this, the source code must be made available to you.\" Nel 1996, quando venne lanciato il sito gnu.org, il free softwre venne definito avere three levels of freedom aggiungendo una menzione esplicita alla libert\u00e0 di sfgudiare il software (che pu\u00f2 essere letta nella definizione originaria come parte della libert\u00e0 di cambiare il programma). Stallman successivamente evit\u00f2 la parola \"livelli\", dicendo che si ha bisogno soltanto di tutta liberta, per cui non va bene pensarci in termini di livelli. Infine, venne aggiunta un'altra libert\u00e0, per indicare esplicitamente che l'utente deve essere in grado di eseguire il programma. Le libert\u00e0 esistenti erano gi\u00e0 numerate dalla uno alla tre, ma questa viene prima delle altre, ed \u00e8 chiamata \"zero\". La definizione moderna ha quindi quattro definizioni: The freedom to run the program as you wish, for any purpose (freedom 0). The freedom to study how the program works, and change it so it does your computing as you wish (freedom 1). Access to the source code is a precondition for this. The freedom to redistribute copies so you can help your neighbor (freedom 2). The freedom to distribute copies of your modified versions to others (freedom 3). By doing this you can give the whole community a chance to benefit from your changes. Access to the source code is a precondition for this. La prima e la terza libert\u00e0 richiedono il sorgente, perch\u00e9 studiare e modificare il software senza il sorgente \u00e8 molto poco pratico (per usare un eufemismo).","title":"Free Software Definition"},{"location":"01_open_source_making/02_gnu/#progetti-ad-alta-priorita","text":"La FSF manitene una lsita di progetti ad alta priorit\u00e0 , dei quali la Fondazione afferma che vi sia un bisogno vitale che la free software community si prenda carico. La FSF considera questi progetti importanti perch\u00e9 gli utenti sono continuamente spinti ad usare software non libero, perch\u00e9 non vi \u00e8 un adeguato rimpiazzo libero. Le task ad alta priorit\u00e0 attuale sono il reverse enginerring di firmware proprietario; il revesible debugging in GNU Debugger, lo sviluppo di software automatico per trascrizione e video editing, Coreboot, driver per router di rete e rimpiazzi per Skyupe, Google Earth, OpenDWG, BitTorrent Sync ed Oracle Forms. Alcuni di quelli del passato riguardavano GNU Classpath, il GNU Compiler per Java, e GNOME. Lo sforzo \u00e8 stato criticato da Michael Larabel per non istigare lo sviluppo attivo o per essere lenti nello sviluppo, anche dopo che certi progetti sono stati aggiunti alla lista.","title":"Progetti ad alta priorit\u00e0"},{"location":"01_open_source_making/02_gnu/#critiche","text":"","title":"Critiche"},{"location":"01_open_source_making/02_gnu/#posizione-sul-drm","text":"Linus Torvalds ha criticatoi la FSF per usare GPLv3 come arma nella lotta al DRM. Torvals nota che il problema della DRM e quello delle licenze dovrebbero essere separati.","title":"posizione sul DRM"},{"location":"01_open_source_making/02_gnu/#defective-by-desiugn","text":"Nel giungo 2919 Joe Brockmeier, un giornalista al Linux Magazine, critic\u00f2 la campagna Defective by Design della FSF come \"negativa \" ed infantile e non adeguata per dare agli utenti alternative credibili al softgware propreiatario. La FSF rispose a queste critiche dicendo che \"that there is a fundamental difference between speaking out against policies or actions and smear campaigns\", e che \"that if one is taking an ethical position, it is justified, and often necessary, to not only speak about the benefits of freedom but against acts of dispossession and disenfranchisement.\"[63]","title":"Defective by Desiugn"},{"location":"01_open_source_making/02_gnu/#gnu-libredwg-license-controversy","text":"Nel 2009, un aggiornamento di LibDWG/LibreDWG alla versione 3 della GPL ha reso impossibile per i progetti LibreCAD e FreeCad di usare la LibreDWG legalmente. Molti altri si aggiunsero al coro, come Assimp e Blender. Alcuni selezionariono che la scelta di una licenza con una compatibilit\u00e0 pi\u00f9 alta, come MIT, BSD o LGPL 2.1. Questa richiesta \u00e8 stata respinta nel 2012.","title":"GNU LibreDWG license controversy"},{"location":"01_open_source_making/02_linux/","text":"La storia di Linux \u00b6 Dopo che AT&T cess\u00f2 il supporto al progetto Multics (TROVARE REF), il sistema operativo Unix venne concepito ed implementato da Ken Thompson e Dennis Ritchie, entrambi membri degli AT&T Bell Laboratories, nel 1969, per poi essere rilasciato durante il 1970. Successivamente, lo riscrissero in un nuovo linguaggio di programmazione, ovvero il C, per renderlo portabile. La disponibilit\u00e0 e portabilit\u00e0 di Unix lo rese ampiamente adottato, copiato e modificato da istituzioni accademiche e business. Nel 1977, fu sviluppata la Berkeley Software Distribution (BSD) dal Computer System Research Group (CSRG) di Berkeley, basata sulla sesta edizione di Unix da AT&T. Dal momento che BSD conteneva codice Unix che AT&T possedeva, AT&T lanci\u00f2 una causa legale nei primi anni '90 contro l'universit\u00e0. Questo limit\u00f2 fortemente lo sviluppo e l'adozione di BSD. Nel 1983, Richard Stallman cre\u00f2 il progetto GNU con l'obiettivo di creare un sistema operativo libero UNiX-like. Come parte di questo lavoro, scrisse la GNU General Public License (GPL). All'inizio degli anni '90, c'era abbastanza software disponibile per creare un sistema operativo completo. Nel 1985, Intel rilasci\u00f2 il processore 80386, ilprimo microprocessore x86 con un instruction set a 32 bit ed una memory management unit con meccanismi di paging (TODO: valurare rilevanza) Nel 1986, Maurice Bach deglki AT&T Bell Labs pubblic\u00f2 The Design of the UNIX Operating System . Questa descrizione copriva principalemnte il kernel System V Release 2, con alcune nuove feature prese dalla Release 3 e dalla BSD. Nel 1987, MINIX, un sistema Unix-like pensato per l'utilizzo accademico, venne rilasciato da Tanenbaum allo scopo di esemplificare i principi coperti nel suo libro Operating Systems: Design and Implementation . Anche se il codice sorgente per il sistema era stato reso disponibile, modifiche e redistribuzione erano vincolate. Inoltre, il design a 16 bit di MINIX non era adatto alle feature a 32 bit dell'architettura 386 di Intel. Contestualmente, per\u00f2, nei primi anni '90 un sistema operativo UNIX commerciale per i PC 386 era considerato troppo costoso per gli utenti privati. Questi fattori, uniti alla mancanza di un kernel libero ampiamente adottato, fornirono l'impeto a Linus Torvald per iniziare il suo progetto. In tal senso, disse che se uno tra GNU Hurd e 386BSD fossero stati disponibili all'epoca, probabilmente non avrebbe iniziato a scrivere Linux. La creazione di Linux \u00b6 Nel 1991, mentre studiava informaica all'Univerit\u00e0 di Helsinki, Linus Torvalds inizi\u00f2 un progetto che venne successivamente conosciuto come Linux kernel. Scrisse il programma specificamente per l'hardware che stava usando, ed indipendentemente dal sistema operativo, perch\u00e9 voleva usare le funzioni del suo nuovo PC con processore 80386. Lo sviluppo avvenne su MINIX usando il compilatore GCC, che rappresenta ancora la scelta principale usata in Linux al giorno d'oggi. Cos\u00ec come Torvalds scrive nel suo libro Just for Fun , alla fine scrisse un kernel per un sistema operativo. Il 25 agosto 1991 annunciava questo sistema in un post sul gruppo Usenet \"comp.os.minix.\": Il lancio di Linux Hello everybody out there using minix - I'm doing a (free) operating system (just a hobby, won't be big and professional like gnu) for 386(486) AT clones. This has been brewing since april, and is starting to get ready. I'd like any feedback on things people like/dislike in minix, as my OS resembles it somewhat (same physical layout of the file-system (due to practical reasons) among other things). I've currently ported bash(1.08) and gcc(1.40), and things seem to work. This implies that I'll get something practical within a few months, and I'd like to know what features most people would want. Any suggestions are welcome, but I won't promise I'll implement them :-) Linus ( torvalds@kruuna.helsinki.fi ) PS. Yes - it's free of any minix code, and it has a multi-threaded fs. It is NOT portable (uses 386 task switching etc), and it probably never will support anything other than AT-harddisks, as that's all I have :-(. \u2014\u2009Linus Torvalds Secondo Torvalds, Linux inizi\u00f2 a guadagnare importanza nel 1992, dopo che X Window System (che non \u00e8 una versione arcaica di Windows, ma un sistema di gestione della grafica) venne rilasciato su Linux da Orest Zborowski, permettendo a Linux di offrire un'interfaccia grafica per la prima volta. Il nome \u00b6 Linus Torvalds avrebbe voluto chiamare la sua invenzione Freax , un misto tra le parole free , freak ed x , quest'ultima come allusione ad Unix. Durante l'inzio del suo lavoro sul sistema, memorizz\u00f2 i file sotto il nome Freax per circa sei mesi. Torvalds aveva gi\u00e0 considerato il nome Linux, ma lo aveva inizialmente scartato ritenendolo troppo egoista. Per facilitare lo sviluppo, ifile vennero messi su un server FTP di FUNET nel settembre del 1991. Ari Lemmke della Helsinki University of Technology che era uno degli amministratori volontari del server FTP all'epoca non pensava che Freax fosse un buon nome. Per cui, cambi\u00f2 il nome del progetto a Linux sul server senza consultare Torvalds, che per\u00f2 successivamente acconsenti a chiamarli Linxu. Per mostrare come la parola \"Linux\" dovrebbe essere pronunciata ([\u02c8li\u02d0n\u0275ks]), Torvalds incluse un'audioguida all'interno del codice sorgente di Linux. Linux e la licenza GNU GPL \u00b6 Linus Torvalds sulla scelta di usare la licenza GNU GPL Making Linux GPLed was definitely the best thing I ever did. Torvalds rilasci\u00f2 inizialmente il kernel Linux sotto una licenza che aveva una restrizione riguardante le attivit\u00e0 commerciali. Il software da usare con il kernel doveva essere stato sviluppato come parte del progetto GNU, e rilasciato con la GNU General Public License. Laprima release dle kernel Linux, Linux 0.01, includeva il codice sorgente del Bash shell di GNU. Nelle Notes for linux release 0.01 , Torvalds elencava il software GNU che \u00e8 richiesto epr eseguire Linux: Quote Sadly, a kernel by itself gets you nowhere. To get a working system you need a shell, compilers, a library etc. These are separate parts and may be under a stricter (or even looser) copyright. Most of the tools used with linux are GNU software and are under the GNU copyleft. These tools aren't in the distribution - ask me (or GNU) for more info. Nel 1992, sugger\u00ec di rilasciare il kernel sotto la GNU GPL. Annunci\u00f2 per la prima volta questa decisione nelle release note della versione 0.12. Alla met\u00e0 di dicembre 1992, pubblic\u00f2 la versione 0.99 usando la GNU GPL. Linux e gli sviluppatori GNU lavorarono per integrare i componenti GNU con Linux e creare un sistema operativo completamente funzionante e libero. Attorno al 2000, Torvalds chiar\u00ec che la licenza utente per il kernel Linux \u00e8 esattamente la GPLv2, senza la common \"or later clause\" . Nel 2007, dopo anni di discussione del draft, venne rilasciata la GPLv3, e Torvalds, assieme alla maggior parte degli sviluppatori del kernel, decise di adottare la nnuova licenza per il kernel. La controversia GNU/Linux \u00b6 Il nome \"Linux\" venne inizialmente usato da Torvalds soltanto per il kernel. Il kernel era, comunque, spesso usato assieme ad altro software, specialmente quello legato al progetto GNU. Questo divenne rapidamente l'adozione pi\u00f9 popolare del software GNU. Nel giugno 1994, nel GNU bulletin, Linux fu indicato come un free UNIX clone , ed il progetto Debian inizi\u00f2 a chiamare il suo prodotto Debian GNU/Linux. Nel maggio 1996, Stallman pubblic\u00f2 la versione 19.31 di Emacs, nel quale il tipo di sistema venne chiamato Lignnux invece di Linux. Questo spelling era necessario per riferirsi alla combinazione di GNU e Linux. Mascotte ufficiale \u00b6 Torvalds annunci\u00f2 nel 1996 che ci sarebbe stata una mascotte per Linux, un pinguino. Qeusto era perch\u00e9 quando stavano scegliendo la mascotte Torvalds disse che era stato morso da un piccolo pinguino in una visita allo zoo di Canberra in Australia. Larry Ewing forn\u00ec lo schizzo iniziale della mascotte basato su questa descrizione. Il nome invece venne suggerito da James Hughes, e pensato come un derivativo da Torvalds' UniX, e come un abbrievativo di tuxedo , un capo elegante con un colore simile a quello di un pinguino. NUovi sviluppi \u00b6 Comunit\u00e0 Linux \u00b6 La maggior parte del lavoro su Linux \u00e8 effettuato dalla community: le migliaia di programmatori nel mondo che usano Linux e mandano i miglioramenti suggeriti ai manutentori. Varie compagnie hanno anche aiutato a sviluppare non solo ill kernel, ma anche a scrivere software aggiuntivo, disribuito con Linux. A febbraio del 2015, oltre l'80% degli sivluppatori del kernel Linux sono pagati. Viene rilasciato sia da progetti organizzati come Debian, che da progetti connessi direttamente con altre compagnie come Fedora ed openSUSE. I membri dei risepttivi progetti si incontrano a diverse conferenze e fiere, per scambiare idee. Una delle pi\u00f9 grandi fiere del genere \u00e8 LinuxTag in Genrmania, dove si assemblano annualmente 10.000 persone per discutere Linux ed il progetto associato. (TODO: questo va tolto, citation needed) Open Source Development Lab e Linux Foundation \u00b6 L'Open Source Develpment Lab (OSDL) fu creato nel 2000 come organizzazione indipendente noprofit il cui scopo \u00e8 quello di ottimizzare Linux per usarlo in data center e nel mondo professionale. Torvals lavorava full-time per conto di OSDL, sviluppando i kernel Linux. Nel gennaio del 2007, OSDL si un\u00ec al Free Standards Group per fondare The Linux Foundation , restringendo i focus rispettivi a quello di promuovere LInux come alternativa a Microsoft Windows. Nel 2015, Torvalds rimane con Linux Foundation come Fellow. Companies \u00b6 Nonostante sia liberamente disponibile, diverse compagnie traggono profitto da Linux. Queste compagnie, molte delle quali sono membri della Linux Foudnation, investono risorse considerevoli nell'avanzamento e sviluppo di Linnux, per renderlo adatto a diverse aree applicative. Queste includono donazioni hardware per sviluppatori dei driver, donazioni in cash per chi sviluppa softawre Linux, e l'uso di programmatori Linux nella compagnia. Alcuni esempi sono Dell, IBM ed HP, che validano, usanod e vendono Linux sui loro server, e Red Hat e SUSE, che mantengono le loro distriibuzioni enterprise. Allo stesso modo Digia supporta Linux grazie allo sviluppo ed alla licenza LGPL di Qt, che rende possibile lo sviluppo di KDE, e assumendo alcuni degli sviluppatori di X e KDE. Ambienti desktop \u00b6 KDE \u00e8 stato il primo ambiente desktop avanzato (la versione 1.0 venne rilasciata nel luglio 1998), ma ci sono delle ocntroversie legate all'uso dell'allora proprietario toolkit Qt. GNOME venne sviluppato come alternativa a cauas di questioni legate alle licenze. I due usavano un diverso toolkit sottostante, e quindi progrmamazione differente, ed erano sponsorizzati da due gruppi differenti, KDE e.V. per la prima, e la GNOME Foundation la seconda. Nell'aprile del 2007 venne stimatoche KDE aveva il 65% del emrcato, contro il 26 di GNOME. Nel gennaio del 2008, KDE 4 venne rilasciata prrematuramente cond iversi bug, portando diversi utenti verso GNOME. GNOME 3, rilasciato nell'apriel 2011, venne addirittura definito un unholy mess da Linsu Torvalds a causa di alcuni cambi di design controversi (TODO: approfondire) I problemi con GNOME 3 condussero ad un fork, chiamato Cinnamon, e svilupapto direttamente dallo svilupaptore di Linux Mint chiamato Clement LeFebvre. Questo recuperava lo stile tradizionale, con alcuni miglioramenti marginali. La fondazione Ubuntu rpogett\u00f2 e rilascio nel 2011 una'ltra interfaccia utente chiamata Unity, che \u00e8 radicalmente differente dall'ambiente desktop tradizionale, ed \u00e8 stata criticata per diversi punti deboli ed una scarsa configurabilit\u00e0. Uno dei motivi per cui venne sviluppata questa interfaccia \u00e8 la versione mobile di Ubuntu, che per\u00f2 venne cancellata nell'aprile del 2017da Canonical assieme al progetto ubuntu Touch (TODO: approfondire) per focalizzarsi sui progetti IoT come Ubuntu Core. Nell'aprile 2018, Canonical smise di supportare Unity, ed inizi\u00f2 ad usare GNOME per le release Ubunut a partire dalla 18.04. Linux is obsolete \u00b6 Nel 1992, Tanenmaum scrisse un articolo su Usenet sul gruppo comp.os.minix con il titolo Linux is obsolete , che contraddistinse l'inizio di un famoso dibattito sulla struttura dell'allora recente kernel. Tra le critiche pi\u00f9 aspre c'era quella la seguente: il kernel era monolitico,e quinid \"antico\" non vi era portabilit\u00e0, perch\u00e9 si supportava esclusivamente il processore Intel 386 non vi era uno stretto controllo del codice sorgente da parte di qualcuno linux immpiegava un set di feature inutili (perch\u00e9 Tanenbaum era convinto che un file system multithread era semplicemente un performance hack ) La predizione di Tanenbaum era che Linux sarebbe diventato datato in pochi anni, e rimpiazzato da GNU Hurd (che lui considerava essere al passo coi tempi). Ovviamente, questo si rivel\u00f2 non essere corretto. Linux \u00e8 stato portato su tutti gli hardware principali, ed il suo modello di sviluppo aperto ha portato ad un tasso di sviluppo esemplare. In contrasto, GNU Hurd non ha ancora raggiunto il livello di stabilit\u00e0 che gli permetterebbe di essere usato su un server in produzione. Inoltre, il definire la linea di processori Intel 386 \"strana\" \u00e8 stato anch'esso un errore, in quanto hanno fatto da base per tutti i processori Intel moderni. Nel suo libro non pubblicato Samizdat, Kenneth Brown afferma che Torvalds ha copiato illegalmente codice da MINIX. Nel maggio 2004, ad ogni modo, queste affermazioni vennero confutate da Tanenbaum stesso, che afferm\u00f2 che nonostante MINIX avesse avuto una grossa influenza su Linux, non credeva che Torvalds avesse usato il codice. Collaborazione e competizione con Microsoft \u00b6 Anche se Torvalds ha affermato che Microsoft si sente minacciata da Linux in passato e che questo non aveva avuto alcuna conseguenza su di lui, Microsoft e Linux ebbero numerose interazioni antagonistiche tra il 1997 ed il 2001. Questo divenne chiaro a sufficienza la prima volta nel 1998, quando il primo documento di Halloween venne portato alla luce da Eric Raymond. Questo consisteva in sostanza di un breve saggio da parte di uno sviluppatore Microsoft che elencava le minacce poste a Microsoft dal free software ed identificava le strategie necessarie a minimizzare queste minacce. La competizione entr\u00f2 in una nuova fase all'inizio del 2004, quando Microsoft pubblic\u00f2 i risultati dai casi studio degli utenti che valutavano Windows contro Linux nel nome \"Get the Facts\" sulla loro pagina web. In base a delle ricerche di mercato sponsorizzata dalla Microsoft stessa, i casi di studio dicevano che l'uso enterprise di Linux sui server era sfavorevole a quello di Windows in termini di affidabilit\u00e0, sicurezza, e costi totali. In risposta, i distributori commerciali di Linux produssero i loro studi, survey e testimonial contro la campagna di Microsfot. La campagnia web di Novell alla fine del 2004 era chiamata \"Unbending the truth\", e elencava gi vantaggi cos\u00ec come sfatava i problemi legali di Linux. Novell si riferiva agli studi di Microsoft in molti punti. IBM pubblic\u00f2 anche una serie di studi chiamati \"The Linux at IBM competitive advantage\" per contrastare la capmagna di Microsfot. Red Hat aveva una campagna chiamata \"Truth Happens\" mirata a far s\u00ec che fossero el performance del prodotto a parlare. Nell'autunno del 2006, Novell e Microsoft annunciarono un accordo per cooperare sull'interoperabilit\u00e0 software e la protezione dei brevetti. Qeusto incluse un accordo a riguardo che i clienti di Microsoft e Novell non potevanno essere citati dall'altra compagnia per infrazione dei brevetti. Qeusta protezione dei brevetti era anche estesa agli sviluppatori di software non commerciale free. Quest'ultima parte venne criticata perch\u00e9 includeva soltanto questi ultimi (non-commercial free software developers). Nel luglio 2009, Microsfot sottomise 22.000 linee di codice sorgente al kernel Linux sotto licenza GPLv2, che vennero poi accettate. Anche se qeusta \u00e8 chiamata \"mosta storica\", ed \u00e8 una cartina a tornasole di un miglioramento nelle attitudini di Microsoft verso Linux e l'open source, la decisione non fu proprio altruistica, ion quanto prometteva di portare ad un vantaggio competitivo per Microsoft e evit\u00f2 azioni legali contro Microsoft. Microsoft fu in realt\u00e0 spinta a fare il contributio quando il principal enigneer di Vyatta e il contribuotre di Linux Stephen Hemminger scoprirono che Micorsoft aveva incorporato un driver di rete Hyper-V, con componenti GPL, linkato staticamente a binari closed-source, contravvenendo alla licenza GPL. Microsoft contribu\u00ec ai driver per rettificare la vioalzione di licenza, anche se la compagnia tent\u00f2 di mostrarlo come un atto di favore, piuttosto che uno per evitare lezioni legali. Nel passato Microsoft aveva chiamato Linux \"cancro\" e \"comunista\". Nel 2011, per\u00f2, Microsoft era diventata il 17esimo contributiore al kernel Linux, per poi uscrire dagli sponsor negli anni successivi. Il progetto Windows Azure, poi chiamato Microsoft Azure, venne annunciato nel 2008. Questo incorpora Linux compe parte della suite di applicazioni software server-side. Nel 2018, SUSE cre\u00f2 un kernel Linux psecificamente dedicato al cloud computing, sotto il cappello del progetto Azure. Parlando del port del kernel, un rappresentnatnte di Microsoft afferma che \"The new Azure-tuned kernel allows those customers to quickly take advantage of new Azure services such as Accelerated Networking with SR-IOV.\" Negli ultimi anni, Torvalds ha espresso un attitudine neutrale ed a volte aminchevole verso Microsfot, seguendo l'abbraccio dell'open source softwarre da parte di questa e la collaborazione con la community Linux. In un'intervista a ZDNet Torvalds afferma che: \"The whole anti-Microsoft thing was sometimes funny as a joke, but not really. Today, they're actually much friendlier. I talk to Microsoft engineers at various conferences, and I feel like, yes, they have changed, and the engineers are happy. And they're like really happy working on Linux. So I completely dismissed all the anti-Microsoft stuff.\"[52] Trademark \u00b6 Nel 1994 e nel 1995, diverse persone da diversi paesi tentarono di registrare il nome Linux come marchio registrato, per lanciare diverse richeiste di royalty a diverse compagnie Linux. Linus Trovalds aiut\u00f2 queste compatnie, e venne lui concesso il trademark del nome, che venne trasferito a Linux International. La protezione del marchio venne poi gestita da una fondazione dedicata, il Linux Mark Institute. Nel 2000, Torvalds specific\u00f2 le regole base per l'assegnazione delle licenze. Questo significava che chiunque offrrisse un prodotto o servizio con il nome Linux doveva averne una lincenza, che poteva essere ottenuta mediante un unico acquisto. Nel giugno del 2005, una nuova controversia si sivluppo a riguardo dell'uso di royalty generate dal trademark Linux. Il Linux Mark Institute, che rappresenta i diritti di Linus Torvalds, annunci\u00f2 un aumento dei costi di licenza da 500 a 5000 dollari. Questo passo venne giustificato come necessario per coprire il costo della trademark protection. La community non fu contenta, per cui Linus Rovalds stesso fece un annuncio il 21 agosto 2005, per chiarire la confusione, via e-mail: Linus Torvalds sull'aumento del costo della licenza Linux [...] And let\u2019s repeat: somebody who doesn\u2019t want to protect that name would never do this. You can call anything \"MyLinux\", but the downside is that you may have somebody else who did protect himself come along and send you a cease-and-desist letter. Or, if the name ends up showing up in a trademark search that LMI needs to do every once in a while just to protect the trademark (another legal requirement for trademarks), LMI itself might have to send you a cease-and-desist-or-sublicense it letter. At which point you either rename it to something else, or you sublicense it. See? It\u2019s all about whether you need the protection or not, not about whether LMI wants the money or not. [...] Finally, just to make it clear: not only do I not get a cent of the trademark money, but even LMI (who actually administers the mark) has so far historically always lost money on it. That\u2019s not a way to sustain a trademark, so they\u2019re trying to at least become self-sufficient, but so far I can tell that lawyers fees to give that protection that commercial companies want have been higher than the license fees. Even pro bono lawyers charge for the time of their costs and paralegals etc. \u2014\u2009Linus Torvalds[58] Da quel momento, per\u00f2, il Linux Mark Institute ha iniziato ad offrire una sottolicenza perpetua e valevole nel mondo.","title":"Linux"},{"location":"01_open_source_making/02_linux/#la-storia-di-linux","text":"Dopo che AT&T cess\u00f2 il supporto al progetto Multics (TROVARE REF), il sistema operativo Unix venne concepito ed implementato da Ken Thompson e Dennis Ritchie, entrambi membri degli AT&T Bell Laboratories, nel 1969, per poi essere rilasciato durante il 1970. Successivamente, lo riscrissero in un nuovo linguaggio di programmazione, ovvero il C, per renderlo portabile. La disponibilit\u00e0 e portabilit\u00e0 di Unix lo rese ampiamente adottato, copiato e modificato da istituzioni accademiche e business. Nel 1977, fu sviluppata la Berkeley Software Distribution (BSD) dal Computer System Research Group (CSRG) di Berkeley, basata sulla sesta edizione di Unix da AT&T. Dal momento che BSD conteneva codice Unix che AT&T possedeva, AT&T lanci\u00f2 una causa legale nei primi anni '90 contro l'universit\u00e0. Questo limit\u00f2 fortemente lo sviluppo e l'adozione di BSD. Nel 1983, Richard Stallman cre\u00f2 il progetto GNU con l'obiettivo di creare un sistema operativo libero UNiX-like. Come parte di questo lavoro, scrisse la GNU General Public License (GPL). All'inizio degli anni '90, c'era abbastanza software disponibile per creare un sistema operativo completo. Nel 1985, Intel rilasci\u00f2 il processore 80386, ilprimo microprocessore x86 con un instruction set a 32 bit ed una memory management unit con meccanismi di paging (TODO: valurare rilevanza) Nel 1986, Maurice Bach deglki AT&T Bell Labs pubblic\u00f2 The Design of the UNIX Operating System . Questa descrizione copriva principalemnte il kernel System V Release 2, con alcune nuove feature prese dalla Release 3 e dalla BSD. Nel 1987, MINIX, un sistema Unix-like pensato per l'utilizzo accademico, venne rilasciato da Tanenbaum allo scopo di esemplificare i principi coperti nel suo libro Operating Systems: Design and Implementation . Anche se il codice sorgente per il sistema era stato reso disponibile, modifiche e redistribuzione erano vincolate. Inoltre, il design a 16 bit di MINIX non era adatto alle feature a 32 bit dell'architettura 386 di Intel. Contestualmente, per\u00f2, nei primi anni '90 un sistema operativo UNIX commerciale per i PC 386 era considerato troppo costoso per gli utenti privati. Questi fattori, uniti alla mancanza di un kernel libero ampiamente adottato, fornirono l'impeto a Linus Torvald per iniziare il suo progetto. In tal senso, disse che se uno tra GNU Hurd e 386BSD fossero stati disponibili all'epoca, probabilmente non avrebbe iniziato a scrivere Linux.","title":"La storia di Linux"},{"location":"01_open_source_making/02_linux/#la-creazione-di-linux","text":"Nel 1991, mentre studiava informaica all'Univerit\u00e0 di Helsinki, Linus Torvalds inizi\u00f2 un progetto che venne successivamente conosciuto come Linux kernel. Scrisse il programma specificamente per l'hardware che stava usando, ed indipendentemente dal sistema operativo, perch\u00e9 voleva usare le funzioni del suo nuovo PC con processore 80386. Lo sviluppo avvenne su MINIX usando il compilatore GCC, che rappresenta ancora la scelta principale usata in Linux al giorno d'oggi. Cos\u00ec come Torvalds scrive nel suo libro Just for Fun , alla fine scrisse un kernel per un sistema operativo. Il 25 agosto 1991 annunciava questo sistema in un post sul gruppo Usenet \"comp.os.minix.\": Il lancio di Linux Hello everybody out there using minix - I'm doing a (free) operating system (just a hobby, won't be big and professional like gnu) for 386(486) AT clones. This has been brewing since april, and is starting to get ready. I'd like any feedback on things people like/dislike in minix, as my OS resembles it somewhat (same physical layout of the file-system (due to practical reasons) among other things). I've currently ported bash(1.08) and gcc(1.40), and things seem to work. This implies that I'll get something practical within a few months, and I'd like to know what features most people would want. Any suggestions are welcome, but I won't promise I'll implement them :-) Linus ( torvalds@kruuna.helsinki.fi ) PS. Yes - it's free of any minix code, and it has a multi-threaded fs. It is NOT portable (uses 386 task switching etc), and it probably never will support anything other than AT-harddisks, as that's all I have :-(. \u2014\u2009Linus Torvalds Secondo Torvalds, Linux inizi\u00f2 a guadagnare importanza nel 1992, dopo che X Window System (che non \u00e8 una versione arcaica di Windows, ma un sistema di gestione della grafica) venne rilasciato su Linux da Orest Zborowski, permettendo a Linux di offrire un'interfaccia grafica per la prima volta.","title":"La creazione di Linux"},{"location":"01_open_source_making/02_linux/#il-nome","text":"Linus Torvalds avrebbe voluto chiamare la sua invenzione Freax , un misto tra le parole free , freak ed x , quest'ultima come allusione ad Unix. Durante l'inzio del suo lavoro sul sistema, memorizz\u00f2 i file sotto il nome Freax per circa sei mesi. Torvalds aveva gi\u00e0 considerato il nome Linux, ma lo aveva inizialmente scartato ritenendolo troppo egoista. Per facilitare lo sviluppo, ifile vennero messi su un server FTP di FUNET nel settembre del 1991. Ari Lemmke della Helsinki University of Technology che era uno degli amministratori volontari del server FTP all'epoca non pensava che Freax fosse un buon nome. Per cui, cambi\u00f2 il nome del progetto a Linux sul server senza consultare Torvalds, che per\u00f2 successivamente acconsenti a chiamarli Linxu. Per mostrare come la parola \"Linux\" dovrebbe essere pronunciata ([\u02c8li\u02d0n\u0275ks]), Torvalds incluse un'audioguida all'interno del codice sorgente di Linux.","title":"Il nome"},{"location":"01_open_source_making/02_linux/#linux-e-la-licenza-gnu-gpl","text":"Linus Torvalds sulla scelta di usare la licenza GNU GPL Making Linux GPLed was definitely the best thing I ever did. Torvalds rilasci\u00f2 inizialmente il kernel Linux sotto una licenza che aveva una restrizione riguardante le attivit\u00e0 commerciali. Il software da usare con il kernel doveva essere stato sviluppato come parte del progetto GNU, e rilasciato con la GNU General Public License. Laprima release dle kernel Linux, Linux 0.01, includeva il codice sorgente del Bash shell di GNU. Nelle Notes for linux release 0.01 , Torvalds elencava il software GNU che \u00e8 richiesto epr eseguire Linux: Quote Sadly, a kernel by itself gets you nowhere. To get a working system you need a shell, compilers, a library etc. These are separate parts and may be under a stricter (or even looser) copyright. Most of the tools used with linux are GNU software and are under the GNU copyleft. These tools aren't in the distribution - ask me (or GNU) for more info. Nel 1992, sugger\u00ec di rilasciare il kernel sotto la GNU GPL. Annunci\u00f2 per la prima volta questa decisione nelle release note della versione 0.12. Alla met\u00e0 di dicembre 1992, pubblic\u00f2 la versione 0.99 usando la GNU GPL. Linux e gli sviluppatori GNU lavorarono per integrare i componenti GNU con Linux e creare un sistema operativo completamente funzionante e libero. Attorno al 2000, Torvalds chiar\u00ec che la licenza utente per il kernel Linux \u00e8 esattamente la GPLv2, senza la common \"or later clause\" . Nel 2007, dopo anni di discussione del draft, venne rilasciata la GPLv3, e Torvalds, assieme alla maggior parte degli sviluppatori del kernel, decise di adottare la nnuova licenza per il kernel.","title":"Linux e la licenza GNU GPL"},{"location":"01_open_source_making/02_linux/#la-controversia-gnulinux","text":"Il nome \"Linux\" venne inizialmente usato da Torvalds soltanto per il kernel. Il kernel era, comunque, spesso usato assieme ad altro software, specialmente quello legato al progetto GNU. Questo divenne rapidamente l'adozione pi\u00f9 popolare del software GNU. Nel giugno 1994, nel GNU bulletin, Linux fu indicato come un free UNIX clone , ed il progetto Debian inizi\u00f2 a chiamare il suo prodotto Debian GNU/Linux. Nel maggio 1996, Stallman pubblic\u00f2 la versione 19.31 di Emacs, nel quale il tipo di sistema venne chiamato Lignnux invece di Linux. Questo spelling era necessario per riferirsi alla combinazione di GNU e Linux.","title":"La controversia GNU/Linux"},{"location":"01_open_source_making/02_linux/#mascotte-ufficiale","text":"Torvalds annunci\u00f2 nel 1996 che ci sarebbe stata una mascotte per Linux, un pinguino. Qeusto era perch\u00e9 quando stavano scegliendo la mascotte Torvalds disse che era stato morso da un piccolo pinguino in una visita allo zoo di Canberra in Australia. Larry Ewing forn\u00ec lo schizzo iniziale della mascotte basato su questa descrizione. Il nome invece venne suggerito da James Hughes, e pensato come un derivativo da Torvalds' UniX, e come un abbrievativo di tuxedo , un capo elegante con un colore simile a quello di un pinguino.","title":"Mascotte ufficiale"},{"location":"01_open_source_making/02_linux/#nuovi-sviluppi","text":"","title":"NUovi sviluppi"},{"location":"01_open_source_making/02_linux/#comunita-linux","text":"La maggior parte del lavoro su Linux \u00e8 effettuato dalla community: le migliaia di programmatori nel mondo che usano Linux e mandano i miglioramenti suggeriti ai manutentori. Varie compagnie hanno anche aiutato a sviluppare non solo ill kernel, ma anche a scrivere software aggiuntivo, disribuito con Linux. A febbraio del 2015, oltre l'80% degli sivluppatori del kernel Linux sono pagati. Viene rilasciato sia da progetti organizzati come Debian, che da progetti connessi direttamente con altre compagnie come Fedora ed openSUSE. I membri dei risepttivi progetti si incontrano a diverse conferenze e fiere, per scambiare idee. Una delle pi\u00f9 grandi fiere del genere \u00e8 LinuxTag in Genrmania, dove si assemblano annualmente 10.000 persone per discutere Linux ed il progetto associato. (TODO: questo va tolto, citation needed)","title":"Comunit\u00e0 Linux"},{"location":"01_open_source_making/02_linux/#open-source-development-lab-e-linux-foundation","text":"L'Open Source Develpment Lab (OSDL) fu creato nel 2000 come organizzazione indipendente noprofit il cui scopo \u00e8 quello di ottimizzare Linux per usarlo in data center e nel mondo professionale. Torvals lavorava full-time per conto di OSDL, sviluppando i kernel Linux. Nel gennaio del 2007, OSDL si un\u00ec al Free Standards Group per fondare The Linux Foundation , restringendo i focus rispettivi a quello di promuovere LInux come alternativa a Microsoft Windows. Nel 2015, Torvalds rimane con Linux Foundation come Fellow.","title":"Open Source Development Lab e Linux Foundation"},{"location":"01_open_source_making/02_linux/#companies","text":"Nonostante sia liberamente disponibile, diverse compagnie traggono profitto da Linux. Queste compagnie, molte delle quali sono membri della Linux Foudnation, investono risorse considerevoli nell'avanzamento e sviluppo di Linnux, per renderlo adatto a diverse aree applicative. Queste includono donazioni hardware per sviluppatori dei driver, donazioni in cash per chi sviluppa softawre Linux, e l'uso di programmatori Linux nella compagnia. Alcuni esempi sono Dell, IBM ed HP, che validano, usanod e vendono Linux sui loro server, e Red Hat e SUSE, che mantengono le loro distriibuzioni enterprise. Allo stesso modo Digia supporta Linux grazie allo sviluppo ed alla licenza LGPL di Qt, che rende possibile lo sviluppo di KDE, e assumendo alcuni degli sviluppatori di X e KDE.","title":"Companies"},{"location":"01_open_source_making/02_linux/#ambienti-desktop","text":"KDE \u00e8 stato il primo ambiente desktop avanzato (la versione 1.0 venne rilasciata nel luglio 1998), ma ci sono delle ocntroversie legate all'uso dell'allora proprietario toolkit Qt. GNOME venne sviluppato come alternativa a cauas di questioni legate alle licenze. I due usavano un diverso toolkit sottostante, e quindi progrmamazione differente, ed erano sponsorizzati da due gruppi differenti, KDE e.V. per la prima, e la GNOME Foundation la seconda. Nell'aprile del 2007 venne stimatoche KDE aveva il 65% del emrcato, contro il 26 di GNOME. Nel gennaio del 2008, KDE 4 venne rilasciata prrematuramente cond iversi bug, portando diversi utenti verso GNOME. GNOME 3, rilasciato nell'apriel 2011, venne addirittura definito un unholy mess da Linsu Torvalds a causa di alcuni cambi di design controversi (TODO: approfondire) I problemi con GNOME 3 condussero ad un fork, chiamato Cinnamon, e svilupapto direttamente dallo svilupaptore di Linux Mint chiamato Clement LeFebvre. Questo recuperava lo stile tradizionale, con alcuni miglioramenti marginali. La fondazione Ubuntu rpogett\u00f2 e rilascio nel 2011 una'ltra interfaccia utente chiamata Unity, che \u00e8 radicalmente differente dall'ambiente desktop tradizionale, ed \u00e8 stata criticata per diversi punti deboli ed una scarsa configurabilit\u00e0. Uno dei motivi per cui venne sviluppata questa interfaccia \u00e8 la versione mobile di Ubuntu, che per\u00f2 venne cancellata nell'aprile del 2017da Canonical assieme al progetto ubuntu Touch (TODO: approfondire) per focalizzarsi sui progetti IoT come Ubuntu Core. Nell'aprile 2018, Canonical smise di supportare Unity, ed inizi\u00f2 ad usare GNOME per le release Ubunut a partire dalla 18.04.","title":"Ambienti desktop"},{"location":"01_open_source_making/02_linux/#linux-is-obsolete","text":"Nel 1992, Tanenmaum scrisse un articolo su Usenet sul gruppo comp.os.minix con il titolo Linux is obsolete , che contraddistinse l'inizio di un famoso dibattito sulla struttura dell'allora recente kernel. Tra le critiche pi\u00f9 aspre c'era quella la seguente: il kernel era monolitico,e quinid \"antico\" non vi era portabilit\u00e0, perch\u00e9 si supportava esclusivamente il processore Intel 386 non vi era uno stretto controllo del codice sorgente da parte di qualcuno linux immpiegava un set di feature inutili (perch\u00e9 Tanenbaum era convinto che un file system multithread era semplicemente un performance hack ) La predizione di Tanenbaum era che Linux sarebbe diventato datato in pochi anni, e rimpiazzato da GNU Hurd (che lui considerava essere al passo coi tempi). Ovviamente, questo si rivel\u00f2 non essere corretto. Linux \u00e8 stato portato su tutti gli hardware principali, ed il suo modello di sviluppo aperto ha portato ad un tasso di sviluppo esemplare. In contrasto, GNU Hurd non ha ancora raggiunto il livello di stabilit\u00e0 che gli permetterebbe di essere usato su un server in produzione. Inoltre, il definire la linea di processori Intel 386 \"strana\" \u00e8 stato anch'esso un errore, in quanto hanno fatto da base per tutti i processori Intel moderni. Nel suo libro non pubblicato Samizdat, Kenneth Brown afferma che Torvalds ha copiato illegalmente codice da MINIX. Nel maggio 2004, ad ogni modo, queste affermazioni vennero confutate da Tanenbaum stesso, che afferm\u00f2 che nonostante MINIX avesse avuto una grossa influenza su Linux, non credeva che Torvalds avesse usato il codice.","title":"Linux is obsolete"},{"location":"01_open_source_making/02_linux/#collaborazione-e-competizione-con-microsoft","text":"Anche se Torvalds ha affermato che Microsoft si sente minacciata da Linux in passato e che questo non aveva avuto alcuna conseguenza su di lui, Microsoft e Linux ebbero numerose interazioni antagonistiche tra il 1997 ed il 2001. Questo divenne chiaro a sufficienza la prima volta nel 1998, quando il primo documento di Halloween venne portato alla luce da Eric Raymond. Questo consisteva in sostanza di un breve saggio da parte di uno sviluppatore Microsoft che elencava le minacce poste a Microsoft dal free software ed identificava le strategie necessarie a minimizzare queste minacce. La competizione entr\u00f2 in una nuova fase all'inizio del 2004, quando Microsoft pubblic\u00f2 i risultati dai casi studio degli utenti che valutavano Windows contro Linux nel nome \"Get the Facts\" sulla loro pagina web. In base a delle ricerche di mercato sponsorizzata dalla Microsoft stessa, i casi di studio dicevano che l'uso enterprise di Linux sui server era sfavorevole a quello di Windows in termini di affidabilit\u00e0, sicurezza, e costi totali. In risposta, i distributori commerciali di Linux produssero i loro studi, survey e testimonial contro la campagna di Microsfot. La campagnia web di Novell alla fine del 2004 era chiamata \"Unbending the truth\", e elencava gi vantaggi cos\u00ec come sfatava i problemi legali di Linux. Novell si riferiva agli studi di Microsoft in molti punti. IBM pubblic\u00f2 anche una serie di studi chiamati \"The Linux at IBM competitive advantage\" per contrastare la capmagna di Microsfot. Red Hat aveva una campagna chiamata \"Truth Happens\" mirata a far s\u00ec che fossero el performance del prodotto a parlare. Nell'autunno del 2006, Novell e Microsoft annunciarono un accordo per cooperare sull'interoperabilit\u00e0 software e la protezione dei brevetti. Qeusto incluse un accordo a riguardo che i clienti di Microsoft e Novell non potevanno essere citati dall'altra compagnia per infrazione dei brevetti. Qeusta protezione dei brevetti era anche estesa agli sviluppatori di software non commerciale free. Quest'ultima parte venne criticata perch\u00e9 includeva soltanto questi ultimi (non-commercial free software developers). Nel luglio 2009, Microsfot sottomise 22.000 linee di codice sorgente al kernel Linux sotto licenza GPLv2, che vennero poi accettate. Anche se qeusta \u00e8 chiamata \"mosta storica\", ed \u00e8 una cartina a tornasole di un miglioramento nelle attitudini di Microsoft verso Linux e l'open source, la decisione non fu proprio altruistica, ion quanto prometteva di portare ad un vantaggio competitivo per Microsoft e evit\u00f2 azioni legali contro Microsoft. Microsoft fu in realt\u00e0 spinta a fare il contributio quando il principal enigneer di Vyatta e il contribuotre di Linux Stephen Hemminger scoprirono che Micorsoft aveva incorporato un driver di rete Hyper-V, con componenti GPL, linkato staticamente a binari closed-source, contravvenendo alla licenza GPL. Microsoft contribu\u00ec ai driver per rettificare la vioalzione di licenza, anche se la compagnia tent\u00f2 di mostrarlo come un atto di favore, piuttosto che uno per evitare lezioni legali. Nel passato Microsoft aveva chiamato Linux \"cancro\" e \"comunista\". Nel 2011, per\u00f2, Microsoft era diventata il 17esimo contributiore al kernel Linux, per poi uscrire dagli sponsor negli anni successivi. Il progetto Windows Azure, poi chiamato Microsoft Azure, venne annunciato nel 2008. Questo incorpora Linux compe parte della suite di applicazioni software server-side. Nel 2018, SUSE cre\u00f2 un kernel Linux psecificamente dedicato al cloud computing, sotto il cappello del progetto Azure. Parlando del port del kernel, un rappresentnatnte di Microsoft afferma che \"The new Azure-tuned kernel allows those customers to quickly take advantage of new Azure services such as Accelerated Networking with SR-IOV.\" Negli ultimi anni, Torvalds ha espresso un attitudine neutrale ed a volte aminchevole verso Microsfot, seguendo l'abbraccio dell'open source softwarre da parte di questa e la collaborazione con la community Linux. In un'intervista a ZDNet Torvalds afferma che: \"The whole anti-Microsoft thing was sometimes funny as a joke, but not really. Today, they're actually much friendlier. I talk to Microsoft engineers at various conferences, and I feel like, yes, they have changed, and the engineers are happy. And they're like really happy working on Linux. So I completely dismissed all the anti-Microsoft stuff.\"[52]","title":"Collaborazione e competizione con Microsoft"},{"location":"01_open_source_making/02_linux/#trademark","text":"Nel 1994 e nel 1995, diverse persone da diversi paesi tentarono di registrare il nome Linux come marchio registrato, per lanciare diverse richeiste di royalty a diverse compagnie Linux. Linus Trovalds aiut\u00f2 queste compatnie, e venne lui concesso il trademark del nome, che venne trasferito a Linux International. La protezione del marchio venne poi gestita da una fondazione dedicata, il Linux Mark Institute. Nel 2000, Torvalds specific\u00f2 le regole base per l'assegnazione delle licenze. Questo significava che chiunque offrrisse un prodotto o servizio con il nome Linux doveva averne una lincenza, che poteva essere ottenuta mediante un unico acquisto. Nel giugno del 2005, una nuova controversia si sivluppo a riguardo dell'uso di royalty generate dal trademark Linux. Il Linux Mark Institute, che rappresenta i diritti di Linus Torvalds, annunci\u00f2 un aumento dei costi di licenza da 500 a 5000 dollari. Questo passo venne giustificato come necessario per coprire il costo della trademark protection. La community non fu contenta, per cui Linus Rovalds stesso fece un annuncio il 21 agosto 2005, per chiarire la confusione, via e-mail: Linus Torvalds sull'aumento del costo della licenza Linux [...] And let\u2019s repeat: somebody who doesn\u2019t want to protect that name would never do this. You can call anything \"MyLinux\", but the downside is that you may have somebody else who did protect himself come along and send you a cease-and-desist letter. Or, if the name ends up showing up in a trademark search that LMI needs to do every once in a while just to protect the trademark (another legal requirement for trademarks), LMI itself might have to send you a cease-and-desist-or-sublicense it letter. At which point you either rename it to something else, or you sublicense it. See? It\u2019s all about whether you need the protection or not, not about whether LMI wants the money or not. [...] Finally, just to make it clear: not only do I not get a cent of the trademark money, but even LMI (who actually administers the mark) has so far historically always lost money on it. That\u2019s not a way to sustain a trademark, so they\u2019re trying to at least become self-sufficient, but so far I can tell that lawyers fees to give that protection that commercial companies want have been higher than the license fees. Even pro bono lawyers charge for the time of their costs and paralegals etc. \u2014\u2009Linus Torvalds[58] Da quel momento, per\u00f2, il Linux Mark Institute ha iniziato ad offrire una sottolicenza perpetua e valevole nel mondo.","title":"Trademark"},{"location":"01_open_source_making/03_movements/","text":"I movimenti Open Source \u00b6 L'Open Source Initiative (OSI) \u00b6 Lo sviluppo basato sulla condivisione e sul miglioramento collettivo del codice sorgente del software ha una storia lunga quanto quella dello sviluppo software stesso. Al termine degli anni '90, l'interesse e la partecipazione in questo fenomeno aumentarono marcatamente con il riconoscimento mainstream di Linux in pubblicazioni come Forbes, oltre alla contestuale release del codice sorgente del browser NEtscape. L'OSI venne format anel 1998 come un'organizzazione volta all'educazione ed alla sponsorizzazione di quesot importante momento nella stora dello sviluppo collaborativo. coining \"open source\" \u00b6 la label \"open source\" venne creata il 3 febbraio del 1998 durante una riunione a Palo Alto, subito dopo l'annuncio della release del codice sorgente di Netscape. La sessione crebbe da una realizzazioene che l'attenzione sull'annuncio di Netscape aveva creato un'opportunit\u00e0 per educare riguardo alla superiorit\u00e0 di un processo di open development . I partecipanti alla conferenza credevano che il pragmatismo business-oriented che aveva motivato Netscape a rilasciare il loro codice sorgente illustrava un modo valevole di interfacciarsi con potenziali utenti e sviluppatori, convincendoli a creare e migliorare il codice sorgente partecipando in una community coinvolta. I partecipanti alla conferenza credevano anche che sarebbe stato utile avere uan singola etichetta che identificasse questo approccio, distinguendolo dalle label \"free software\". Il brainstorming per questa nuova label convergette sul termine open source, originariamente suggerito da Chirstine Peterson. Due di quelli presenti al meeting di Palo Alto (Eric Raymond e Michael Tiemann) sarebbero stati successivamente presidenti dell'OSI, mentre altri (come Todd Andersen, Jon Hall, Larry Augustin e Sam Ockman) sarebbero stati dei supporter iniziali dell'organizzazione. L'adozione del termine divenne rapida, con il supporto da parte di diverse figure importanti nella communityu, come Linus Torvalds, e dall'aprile del 1998 il free Software Summit venne frequentato da importanti pesonalit\u00e0, inclusi le figure che vavevano fondato Python Per e Apache, e rapprensentatni della IETF e dell'Internet Software Consortium. La fondazione dell'Organizzaizone \u00b6 L'OSI venne fondata congiuntamente da Eric Raymond e Bruce Perens nel tardo febbraio dle 1998, con Raymond come primo presidente, Perens come vicepresidente, ed un iniziale board composto da Brian Behlendorf, Ian Murdock, Russ Nelson, e Chip Salzenberg. OSI venne concepita come un'organizzazione educativa e didivulgazione per eseguire la stessa mission su cui ci si era accordati durante il Free Software Summit dell'aprile del 1998. Al meeting iniziale, il board originale accett\u00e0 questa mission generale, e decise si focalizzarsi specificamente sullo spiegare e proteggere la label \"open source\". venne portato avanti anche dell'attivismo inizialmente, con l'OSI che supportava una petizione per incoraggiare il governo US ad usare software open source nel gennaio del 1999. Valutazione delle licenze \u00b6 Una delle prime task condotte da OSI fu quella di creare dei draft della Open Source Definition (OSD), ed usarla per creare una lista di licenze approvate dalla OSI. La OSD venne originariamente derivata dalla Debian Free Software Guidelines (DFSG). Bruce Perens aveva compost il draft originale della DFSG, e questo evnne editato, rifinito ed approvato come policy formale dalla comunit\u00e0 di sviluppatori Debian nel 1997. L'OSD venne queindi creata durante il lancio della OSI nel febbraio del 1998 rivedendo la DFSG e rimuovendo i riferimenti a software specifico per Debian. Nell'ottobre del 1999, OSI aveva pubblicato la sua prima lista formale di licenze approvate. La lista di licenze OSI, aggiornata da allora molte volte, \u00e8 rimasta la lista canonica di licenze open source, ed \u00e8 referenziata da diverse parti terze, inclusi governi ed organismi di standardizzazione. Nel 2004, l'OSI aggiunse la clausola 10 all'OSD per affrontare alcuni problemi riguardanti il cosiddetto click-wrap licensiong (TODO: trova). Altrimenti l'OSD sarebbe stata stabile dalla sua nascita, con solo poche parole di chiarificazione in altre clausole. Nel 2004, a causa dell'aumento nel mercato del numero di licenze opensource, OSI lanci\u00f2 una campagna per ridurne il numero. Questo risult\u00f2 nel 2006 nella pubblicazione di un report detto di License Proliferation , e una ricategorizzazione delle lioste delle licenze in gruppi di licenze basati sull'uso cos\u00ec come sul contentuto. Il report dell'OSI ed il processo aiutarno a portare un'ampia consapevolezza sul problema generale della proliferazione delle licenze, riducendo contestualmente la creazione e l'uso di nuove licenze. altra divulgazione \u00b6 Il successo principale del Board \u00e8 quello di posizionare la OSD come lo standard del licensing open source, e l'OSI come un corpo standard trusted sia dalla comunit\u00e0 di sviluppatori che dal mondo del business e dal governo. Il progetto venne ampiamente raggiunto verso al fine degli anni '90, e OSI si \u00e8 poi focalizzata sul diventare uno delle community di open source principali assieme alla Free Software Foundation. Molta della divuoltazione dell'OSI prende la forma di persuasione quieta piuttosto che di attivismo - spesso offre background a report, da suggerimenti a politici e business cases ai dirigenti. La reputazione dell'OSI di essere pragmatica ed accessibile la ha aiutata ad affrontare le minacce agli interessi della community prima di raggiungere il punto di diventare crisi visibili. ad esempio, OSI ha lavorato assieme alla Free Software Foundation per convincere le entit\u00e0 antitrust nel richiedere delle licenze open source-friendly dei brevetti CPTN (TODO:).","title":"I movimenti Open Source"},{"location":"01_open_source_making/03_movements/#i-movimenti-open-source","text":"","title":"I movimenti Open Source"},{"location":"01_open_source_making/03_movements/#lopen-source-initiative-osi","text":"Lo sviluppo basato sulla condivisione e sul miglioramento collettivo del codice sorgente del software ha una storia lunga quanto quella dello sviluppo software stesso. Al termine degli anni '90, l'interesse e la partecipazione in questo fenomeno aumentarono marcatamente con il riconoscimento mainstream di Linux in pubblicazioni come Forbes, oltre alla contestuale release del codice sorgente del browser NEtscape. L'OSI venne format anel 1998 come un'organizzazione volta all'educazione ed alla sponsorizzazione di quesot importante momento nella stora dello sviluppo collaborativo.","title":"L'Open Source Initiative (OSI)"},{"location":"01_open_source_making/03_movements/#coining-open-source","text":"la label \"open source\" venne creata il 3 febbraio del 1998 durante una riunione a Palo Alto, subito dopo l'annuncio della release del codice sorgente di Netscape. La sessione crebbe da una realizzazioene che l'attenzione sull'annuncio di Netscape aveva creato un'opportunit\u00e0 per educare riguardo alla superiorit\u00e0 di un processo di open development . I partecipanti alla conferenza credevano che il pragmatismo business-oriented che aveva motivato Netscape a rilasciare il loro codice sorgente illustrava un modo valevole di interfacciarsi con potenziali utenti e sviluppatori, convincendoli a creare e migliorare il codice sorgente partecipando in una community coinvolta. I partecipanti alla conferenza credevano anche che sarebbe stato utile avere uan singola etichetta che identificasse questo approccio, distinguendolo dalle label \"free software\". Il brainstorming per questa nuova label convergette sul termine open source, originariamente suggerito da Chirstine Peterson. Due di quelli presenti al meeting di Palo Alto (Eric Raymond e Michael Tiemann) sarebbero stati successivamente presidenti dell'OSI, mentre altri (come Todd Andersen, Jon Hall, Larry Augustin e Sam Ockman) sarebbero stati dei supporter iniziali dell'organizzazione. L'adozione del termine divenne rapida, con il supporto da parte di diverse figure importanti nella communityu, come Linus Torvalds, e dall'aprile del 1998 il free Software Summit venne frequentato da importanti pesonalit\u00e0, inclusi le figure che vavevano fondato Python Per e Apache, e rapprensentatni della IETF e dell'Internet Software Consortium.","title":"coining \"open source\""},{"location":"01_open_source_making/03_movements/#la-fondazione-dellorganizzaizone","text":"L'OSI venne fondata congiuntamente da Eric Raymond e Bruce Perens nel tardo febbraio dle 1998, con Raymond come primo presidente, Perens come vicepresidente, ed un iniziale board composto da Brian Behlendorf, Ian Murdock, Russ Nelson, e Chip Salzenberg. OSI venne concepita come un'organizzazione educativa e didivulgazione per eseguire la stessa mission su cui ci si era accordati durante il Free Software Summit dell'aprile del 1998. Al meeting iniziale, il board originale accett\u00e0 questa mission generale, e decise si focalizzarsi specificamente sullo spiegare e proteggere la label \"open source\". venne portato avanti anche dell'attivismo inizialmente, con l'OSI che supportava una petizione per incoraggiare il governo US ad usare software open source nel gennaio del 1999.","title":"La fondazione dell'Organizzaizone"},{"location":"01_open_source_making/03_movements/#valutazione-delle-licenze","text":"Una delle prime task condotte da OSI fu quella di creare dei draft della Open Source Definition (OSD), ed usarla per creare una lista di licenze approvate dalla OSI. La OSD venne originariamente derivata dalla Debian Free Software Guidelines (DFSG). Bruce Perens aveva compost il draft originale della DFSG, e questo evnne editato, rifinito ed approvato come policy formale dalla comunit\u00e0 di sviluppatori Debian nel 1997. L'OSD venne queindi creata durante il lancio della OSI nel febbraio del 1998 rivedendo la DFSG e rimuovendo i riferimenti a software specifico per Debian. Nell'ottobre del 1999, OSI aveva pubblicato la sua prima lista formale di licenze approvate. La lista di licenze OSI, aggiornata da allora molte volte, \u00e8 rimasta la lista canonica di licenze open source, ed \u00e8 referenziata da diverse parti terze, inclusi governi ed organismi di standardizzazione. Nel 2004, l'OSI aggiunse la clausola 10 all'OSD per affrontare alcuni problemi riguardanti il cosiddetto click-wrap licensiong (TODO: trova). Altrimenti l'OSD sarebbe stata stabile dalla sua nascita, con solo poche parole di chiarificazione in altre clausole. Nel 2004, a causa dell'aumento nel mercato del numero di licenze opensource, OSI lanci\u00f2 una campagna per ridurne il numero. Questo risult\u00f2 nel 2006 nella pubblicazione di un report detto di License Proliferation , e una ricategorizzazione delle lioste delle licenze in gruppi di licenze basati sull'uso cos\u00ec come sul contentuto. Il report dell'OSI ed il processo aiutarno a portare un'ampia consapevolezza sul problema generale della proliferazione delle licenze, riducendo contestualmente la creazione e l'uso di nuove licenze.","title":"Valutazione delle licenze"},{"location":"01_open_source_making/03_movements/#altra-divulgazione","text":"Il successo principale del Board \u00e8 quello di posizionare la OSD come lo standard del licensing open source, e l'OSI come un corpo standard trusted sia dalla comunit\u00e0 di sviluppatori che dal mondo del business e dal governo. Il progetto venne ampiamente raggiunto verso al fine degli anni '90, e OSI si \u00e8 poi focalizzata sul diventare uno delle community di open source principali assieme alla Free Software Foundation. Molta della divuoltazione dell'OSI prende la forma di persuasione quieta piuttosto che di attivismo - spesso offre background a report, da suggerimenti a politici e business cases ai dirigenti. La reputazione dell'OSI di essere pragmatica ed accessibile la ha aiutata ad affrontare le minacce agli interessi della community prima di raggiungere il punto di diventare crisi visibili. ad esempio, OSI ha lavorato assieme alla Free Software Foundation per convincere le entit\u00e0 antitrust nel richiedere delle licenze open source-friendly dei brevetti CPTN (TODO:).","title":"altra divulgazione"},{"location":"01_open_source_making/04_hardware/","text":"","title":"L'Open Hardware"},{"location":"01_open_source_making/05_making/","text":"","title":"Il fenomeno del Making"},{"location":"02_intro_arduino/01_storia/","text":"Introduzione \u00b6 Un po' di storia \u00b6","title":"Introduzione"},{"location":"02_intro_arduino/01_storia/#introduzione","text":"","title":"Introduzione"},{"location":"02_intro_arduino/01_storia/#un-po-di-storia","text":"","title":"Un po' di storia"},{"location":"02_intro_arduino/02_prototipi_breadboard_shield/","text":"cosa \u00e8 arduino? \u00b6 integrare LA FAMIGLIA ARDUINO \u00b6","title":"cosa \u00e8 arduino?"},{"location":"02_intro_arduino/02_prototipi_breadboard_shield/#cosa-e-arduino","text":"","title":"cosa \u00e8 arduino?"},{"location":"02_intro_arduino/02_prototipi_breadboard_shield/#integrare-la-famiglia-arduino","text":"","title":"integrare LA FAMIGLIA ARDUINO"},{"location":"02_intro_arduino/03_ide/","text":"TODO: estendere \u00b6 L'acronimo IDE sta per Integrated Development Environment , e rappresenta, in informatica, il vero e proprio ambiente di sviluppo . Una IDE offre, in genere, un certo numero di funzionalit\u00e0 che possono semplificare la vita allo sviluppatore, velocizzando i tempi di sviluppo di un programma. Alcuni esempi di questi tool sono: syntax highlighting : le IDE offrono dei tool che permettono di evidenziare la sintassi, differenziando tra keyword del linguaggio, tipi, nomi delle variabili, e cos\u00ec via; compilazione semplificata : molte IDE permettono di compilare il nostro codice sorgente tramite la semplice pressione di un tasto, eliminando quinid la necessit\u00e0 di ricorrere a strumenti da riga di comando molto spesso complessi e di difficile configurazione; tool per test e debug : le IDE offrono solitamente degli strumenti in grado di eseguire inmodo semplice l'intera suite di test per il nostro programma, o di aiutarci nel debug riga per riga dello stesso; integrazione per il versioning le IDE possono offrire dei tool per la gestione semplificata dei sistemi di VCS (Version Control Systems) come Git. La IDE di Arduino \u00b6 Tra i diversi tool disponibili per Arduino, uno tra i pi\u00f9 importanti, se non forse il pi\u00f9 importante, \u00e8 per l'appunto la IDE di Arduino , Questo strumento, rilasciato anch'esso sotto licenza open source, \u00e8 lo strumento principale per lo sviluppo dei programmi ( sketch ) che saranno eseguiti sulla baord. Esistono diverse versioni dell'IDE. La prima \u00e8 quella classica, scaricabile a questo indirizzo, mentre la seconda \u00e8 l'editor web, raggiungibile a questo indirizzo . La IDE offre diversi tool, tra cui i pi\u00f9 importanti sono il Gestore delle Schede ed il Gestore delle Librerie. Gestore delle schede \u00b6 Abbiamo gi\u00e0 visto come quella di Arduino sia in realt\u00e0 una famiglia di schede. Ci\u00f2 comporta che, per definizione, esistano delle differenze tra diverse schede: pensiamo ad esempio alle schede della famiglia Arduino Uno, che non supportano le uscite analogiche, che invece sono supportate dalle schede della famiglia di Arduino Due. Altro fattore influente \u00e8 la natura open di Arduino: le schematiche sono liberamente disponibili, per cui nel tempo \u00e8 sorto un ecosistema di cloni , di qualit\u00e0 pi\u00f9 o meno elevata, alle volte non compatibili con la scheda originaria a causa di differenze in termini di microcontrollore. Le differenze tra le varie famiglie implicano come diretta conseguenza l'impossibilit\u00e0 di utilizzare un unico driver per tutte le schede; di conseguenza, \u00e8 necessaria una maniera per gestire le differenti configurazioni. Per far questo \u00e8 stato introdotto il gestore delle schede : questo permette, mediante un semplice wizard, di gestire diverse schede, selezionandone la famiglia, ed andando a configurarne ciascuna a seconda dei casi. Gestore delle librerie \u00b6 Arduino \u00e8 fortemente incentrato sull'open source. Questo significa che la community ha, nel tempo, sviluppato diverse librerie , ovvero collezioni di classi, metodi e variabili, per la gestione della maggior parte dei casi possibili. Esistono librerie per la gestione, ad esempio, di diverse classi di sensori di temperatura; librerie per la gestione dei servomotori, librerie per l'utilizzo di server REST, e via dicendo. Affidarsi a queste librerie \u00e8 molto spesso meglio che scrivere da s\u00e8 le funzionalit\u00e0: questo, infatti, ci permette di procedere pi\u00f9 speditamente ad implementare le funzionalit\u00e0 che effettivamente ci servono, oltre che di affidarci ad una base 'condivisa' da diversi programmatori (alcuni dei quali con molta esperienza). Per semplificarci la vita, Arduino ci offre un apposito gestore, che pu\u00f2 essere utilizzato sia per integrare una preselezione di librerie curata direttamente dalla community, sia per integrare qualsiasi tipo di libreria fornita in un formato compatibile (che, solitamente, \u00e8 un file di tipo .zip ). Installazione e primo avvio \u00b6 TODO: ILLUSTRARE LA PROCEDURA DI INSTALLAZIONE E DI PRIMO AVVIO DELLA IDE","title":"TODO: estendere"},{"location":"02_intro_arduino/03_ide/#todo-estendere","text":"L'acronimo IDE sta per Integrated Development Environment , e rappresenta, in informatica, il vero e proprio ambiente di sviluppo . Una IDE offre, in genere, un certo numero di funzionalit\u00e0 che possono semplificare la vita allo sviluppatore, velocizzando i tempi di sviluppo di un programma. Alcuni esempi di questi tool sono: syntax highlighting : le IDE offrono dei tool che permettono di evidenziare la sintassi, differenziando tra keyword del linguaggio, tipi, nomi delle variabili, e cos\u00ec via; compilazione semplificata : molte IDE permettono di compilare il nostro codice sorgente tramite la semplice pressione di un tasto, eliminando quinid la necessit\u00e0 di ricorrere a strumenti da riga di comando molto spesso complessi e di difficile configurazione; tool per test e debug : le IDE offrono solitamente degli strumenti in grado di eseguire inmodo semplice l'intera suite di test per il nostro programma, o di aiutarci nel debug riga per riga dello stesso; integrazione per il versioning le IDE possono offrire dei tool per la gestione semplificata dei sistemi di VCS (Version Control Systems) come Git.","title":"TODO: estendere"},{"location":"02_intro_arduino/03_ide/#la-ide-di-arduino","text":"Tra i diversi tool disponibili per Arduino, uno tra i pi\u00f9 importanti, se non forse il pi\u00f9 importante, \u00e8 per l'appunto la IDE di Arduino , Questo strumento, rilasciato anch'esso sotto licenza open source, \u00e8 lo strumento principale per lo sviluppo dei programmi ( sketch ) che saranno eseguiti sulla baord. Esistono diverse versioni dell'IDE. La prima \u00e8 quella classica, scaricabile a questo indirizzo, mentre la seconda \u00e8 l'editor web, raggiungibile a questo indirizzo . La IDE offre diversi tool, tra cui i pi\u00f9 importanti sono il Gestore delle Schede ed il Gestore delle Librerie.","title":"La IDE di Arduino"},{"location":"02_intro_arduino/03_ide/#gestore-delle-schede","text":"Abbiamo gi\u00e0 visto come quella di Arduino sia in realt\u00e0 una famiglia di schede. Ci\u00f2 comporta che, per definizione, esistano delle differenze tra diverse schede: pensiamo ad esempio alle schede della famiglia Arduino Uno, che non supportano le uscite analogiche, che invece sono supportate dalle schede della famiglia di Arduino Due. Altro fattore influente \u00e8 la natura open di Arduino: le schematiche sono liberamente disponibili, per cui nel tempo \u00e8 sorto un ecosistema di cloni , di qualit\u00e0 pi\u00f9 o meno elevata, alle volte non compatibili con la scheda originaria a causa di differenze in termini di microcontrollore. Le differenze tra le varie famiglie implicano come diretta conseguenza l'impossibilit\u00e0 di utilizzare un unico driver per tutte le schede; di conseguenza, \u00e8 necessaria una maniera per gestire le differenti configurazioni. Per far questo \u00e8 stato introdotto il gestore delle schede : questo permette, mediante un semplice wizard, di gestire diverse schede, selezionandone la famiglia, ed andando a configurarne ciascuna a seconda dei casi.","title":"Gestore delle schede"},{"location":"02_intro_arduino/03_ide/#gestore-delle-librerie","text":"Arduino \u00e8 fortemente incentrato sull'open source. Questo significa che la community ha, nel tempo, sviluppato diverse librerie , ovvero collezioni di classi, metodi e variabili, per la gestione della maggior parte dei casi possibili. Esistono librerie per la gestione, ad esempio, di diverse classi di sensori di temperatura; librerie per la gestione dei servomotori, librerie per l'utilizzo di server REST, e via dicendo. Affidarsi a queste librerie \u00e8 molto spesso meglio che scrivere da s\u00e8 le funzionalit\u00e0: questo, infatti, ci permette di procedere pi\u00f9 speditamente ad implementare le funzionalit\u00e0 che effettivamente ci servono, oltre che di affidarci ad una base 'condivisa' da diversi programmatori (alcuni dei quali con molta esperienza). Per semplificarci la vita, Arduino ci offre un apposito gestore, che pu\u00f2 essere utilizzato sia per integrare una preselezione di librerie curata direttamente dalla community, sia per integrare qualsiasi tipo di libreria fornita in un formato compatibile (che, solitamente, \u00e8 un file di tipo .zip ).","title":"Gestore delle librerie"},{"location":"02_intro_arduino/03_ide/#installazione-e-primo-avvio","text":"TODO: ILLUSTRARE LA PROCEDURA DI INSTALLAZIONE E DI PRIMO AVVIO DELLA IDE","title":"Installazione e primo avvio"},{"location":"02_intro_arduino/04_sketch/","text":"RIVEDERE \u00b6 Riprendiamo direttamente da dove avevamo interrotto la lezione precedente, e scriviamo il nostro primo sketch. La tradizione impone che il primo programma in un nuovo linguaggio sia il (famigerato) Hello, World! , uno script (invero molto semplice) la cui principale (ed unica) funzione \u00e8 quella di visualizzare a schermo la scritta Hello, World! . Arduino, ovviamente, non va contro le ormai consolidate usanze. E' per\u00f2 necessario modificarle leggermente, dato che stiamo parlando di una piattaforma che combina hardware e software, per cui il nostro sketch dovr\u00e0 eseguire l'operazione pi\u00f9 semplice che si possa effettuare sui due elementi combinati. Ovvero, molto banalmente, far lampeggiare un LED . Benvenuti nello script Blink.ino . Di cosa abbiamo bisogno? \u00b6 Tutti gli sketch che andremo ad eseguire su Arduino necessiteranno, oltre che della parte software, anche di alcune componenti hardware. Per questa prima prova, ci occorreranno: un LED (il colore non \u00e8 importante); una resistenza da \u03a9; connettori a coccodrillo, jumper e/o una breadboard. In realt\u00e0, esclusivamente per questo sketch, possiamo fare a meno di utilizzare la componentistica hardwre, sfruttando il LED integrato nella maggior parte delle board Arduino (tra cui la Uno, che \u00e8 quella che utilizzeremo). Tuttavia, pu\u00f2 essere utile usare questa configurazione per fare pratica. Come fare? \u00b6 Per prima cosa, inseriamo il LED all'interno della breadboard il LED, e colleghiamo il capo pi\u00f9 corto alla resistenza da 220 \u03a9, come in figura. Successivamente, colleghiamo il capo del LED libero al GND, ed il terminale libero della resistenza al pin 13 di Arduino. E' importante sottolineare come la resistenza non sia polarizzata : ci\u00f2 permette quindi di collegarla al LED ed alla scheda in maniera indipendente dal verso scelto. Nella figura successiva, vediamo come collegare effettivamente le varie componenti del circuito. Questa configurazione (che \u00e8 quella che seguiremo) utilizza la breadboard ed i jumper. Lo sketch (nel dettaglio) \u00b6 Colleghiamo adesso l'Arduino al nostro computer mediante un cavo USB, avviamo la IDE, ed inseriamo il codice seguente in un nuovo sketch, che chiameremo 01-blink.ino . int led = 13; int latency = 1000; void setup() { pinMode(led, OUTPUT); } void loop() { digitalWrite(led, HIGH); delay(latency); digitalWrite(led, LOW); delay(latency); } Clicchiamo ora sul pulsante Verifica dell'IDE; se \u00e8 tutto ok, potremo procedere a caricare lo sketch sulla scheda tramite il pulsante Carica . I pulsanti sono collocati in alto a sinistra nell'IDE, e sono mostrati nella figura successiva. Una volta caricato lo sketch sulla scheda, se tutto \u00e8 andato per il verso giusto, vedremo il led accendersi e spegnersi ogni secondo. Torniamo sul codice che abbiamo scritto nel nostro primo sketch, ed analizziamolo quindi pi\u00f9 nel dettaglio. L'inizializzazione delle variabili \u00b6 Il primo blocco di codice che vogliamo analizzare \u00e8 il seguente: int led = 13; int latency = 1000; Qui vediamo un semplice esempio di applicazione dei concetti che abbiamo gi\u00e0 illustrato quando abbiamo introdotto le variabili. Infatti, si tratta di due semplici inizializzazioni e dichiarazioni , rispettivamente della variabile di tipo intero led , il cui valore \u00e8 pari a 13, e della variabile (sempre di tipo intero) latency , il cui valore \u00e8 pari a 1000. Il setup() \u00b6 Andiamo avanti con l'analisi del codice, e troviamo la nostra prima funzione , ovvero void setup() . Questa funzione viene chiamata all'inizio dell'esecuzione dello sketch, e serve ad impostare i valori e le operazioni iniziali. In questo caso, abbiamo gi\u00e0 inizializzato i valori di led e latency ; tuttavia, sarebbe stato ugualmente corretto modificare la funzione setup() per fare in modo che i valori iniziali di queste variabili fossero assegnati proprio all'interno di questa: void setup() { led = 13; latency = 1000; pinMode(led, OUTPUT); } All'interno della funzione setup() , \u00e8 possibile notare una ulteriore funzione, ovvero pinMode() . Vediamo assieme di cosa si tratta. La funzione pinMode() \u00b6 La funzione pinMode() permette di impostare la modalit\u00e0 di funzionamento di un pin: in particolare, questo pu\u00f2 essere impostato come un output (ovvero come una uscita ) o un input (ovvero come un ingresso ). Quando il pin \u00e8 impostato come output, \u00e8 in grado di scrivere , o inviare in uscita, un certo valore di tensione; quando invece \u00e8 impostato come input, \u00e8 in grado di leggere , o ricevere in ingresso, un certo valore di tensione. Di conseguenza, pinMode() accetta due parametri: il primo \u00e8 il numero del pin di cui settare la modalit\u00e0 di funzionamento, mentre il secondo \u00e8 indicativo della modalit\u00e0 di funzionamento vera e propria. Per quello che riguarda il primo parametro, questo \u00e8 semplice da interpretare e ricordare, e pu\u00f2 assumere valori che vanno da 0 a 13 per i pin digitali, e da A0 ad A5 per i pin analogici. Il secondo parametro \u00e8 anch'esso estremamente semplice da ricordare, e pu\u00f2 essere INPUT o OUTPUT . Il loop() \u00b6 Vediamo ora il corpo centrale dello sketch, costituito dalla funzione loop() , la quale esegue in maniera iterativa (ovvero ciclica) le istruzioni contenute al suo interno. In particolare, la nostra implementazione del loop contiene le seguenti istruzioni: void loop() { digitalWrite(led, HIGH); delay(latency); digitalWrite(led, LOW); delay(latency); } Approfondiamo le due nuove funzioni che abbiamo appena scritto, ovvero digitalWrite() e delay() . La funzione digitalWrite() \u00b6 La funzione digitalWrite() viene utilizzata per applicare una certo valore di tensione ai capi di un pin digitale. In particolare, gli unici valori ammissibili sono alto ( HIGH ) e basso ( LOW ). Impostare un valore alto applicher\u00e0 ai capi del pin una tensione di 5 volt, la quale far\u00e0 accendere il LED; di converso, un valore basso applicher\u00e0 ai capi del pin un valore di tensione nullo, per cui il LED si spegner\u00e0. Il motivo per cui il LED si accende o spegne a seconda della tensione applicata \u00e8 semplice, ed \u00e8 riconducibile ai principi di base dell'elettronica. Infatti, dato che un capo del LED \u00e8 collegato a terra (GND), con tensione pari a 0 V, applicare una differenza di potenziale grazie ai 5 V del pin settato su HIGH provocher\u00e0 lo scorrere della corrente attraverso il LED. Ci\u00f2, ovviamente, non avverr\u00e0 qualora la differenza di potenziale tra GND e pin 13 sia nulla (ovvero, se entrambi sono a 0 V). La funzione delay() \u00b6 L'altra funzione che abbiamo appena scoperto \u00e8 delay() . Questa funzione accetta come parametro in ingresso un unico valore, pari al tempo (in millisecondi) che lo sketch dovr\u00e0 attendere prima di proseguire nella sua esecuzione. In questo caso, quindi, scrivere: delay(latency); significa imporre un ritardo pari proprio al valore di latency (che ricordiamo essere pari a 1000) prima della prosecuzione nell'esecuzione dello sketch. Ricapitoliamo \u00b6 Rivediamo assieme cosa abbiamo imparato in questo sketch. Per prima cosa: inizializziamo due variabili di tipo intero. Nel setup() : impostiamo il pin 13 in modalit\u00e0 OUTPUT . Nel loop() : per prima cosa, impostiamo il valore del pin 13 su HIGH , per cui il LED si accende; l'esecuzione del programma viene sospesa per un secondo; il valore del pin 13 viene quindi impostato a LOW , per cui il LED si spegne; l'esecuzione del programma viene sospesa per un secondo; il loop() ricomincia fino a che Arduino \u00e8 in funzione.","title":"RIVEDERE"},{"location":"02_intro_arduino/04_sketch/#rivedere","text":"Riprendiamo direttamente da dove avevamo interrotto la lezione precedente, e scriviamo il nostro primo sketch. La tradizione impone che il primo programma in un nuovo linguaggio sia il (famigerato) Hello, World! , uno script (invero molto semplice) la cui principale (ed unica) funzione \u00e8 quella di visualizzare a schermo la scritta Hello, World! . Arduino, ovviamente, non va contro le ormai consolidate usanze. E' per\u00f2 necessario modificarle leggermente, dato che stiamo parlando di una piattaforma che combina hardware e software, per cui il nostro sketch dovr\u00e0 eseguire l'operazione pi\u00f9 semplice che si possa effettuare sui due elementi combinati. Ovvero, molto banalmente, far lampeggiare un LED . Benvenuti nello script Blink.ino .","title":"RIVEDERE"},{"location":"02_intro_arduino/04_sketch/#di-cosa-abbiamo-bisogno","text":"Tutti gli sketch che andremo ad eseguire su Arduino necessiteranno, oltre che della parte software, anche di alcune componenti hardware. Per questa prima prova, ci occorreranno: un LED (il colore non \u00e8 importante); una resistenza da \u03a9; connettori a coccodrillo, jumper e/o una breadboard. In realt\u00e0, esclusivamente per questo sketch, possiamo fare a meno di utilizzare la componentistica hardwre, sfruttando il LED integrato nella maggior parte delle board Arduino (tra cui la Uno, che \u00e8 quella che utilizzeremo). Tuttavia, pu\u00f2 essere utile usare questa configurazione per fare pratica.","title":"Di cosa abbiamo bisogno?"},{"location":"02_intro_arduino/04_sketch/#come-fare","text":"Per prima cosa, inseriamo il LED all'interno della breadboard il LED, e colleghiamo il capo pi\u00f9 corto alla resistenza da 220 \u03a9, come in figura. Successivamente, colleghiamo il capo del LED libero al GND, ed il terminale libero della resistenza al pin 13 di Arduino. E' importante sottolineare come la resistenza non sia polarizzata : ci\u00f2 permette quindi di collegarla al LED ed alla scheda in maniera indipendente dal verso scelto. Nella figura successiva, vediamo come collegare effettivamente le varie componenti del circuito. Questa configurazione (che \u00e8 quella che seguiremo) utilizza la breadboard ed i jumper.","title":"Come fare?"},{"location":"02_intro_arduino/04_sketch/#lo-sketch-nel-dettaglio","text":"Colleghiamo adesso l'Arduino al nostro computer mediante un cavo USB, avviamo la IDE, ed inseriamo il codice seguente in un nuovo sketch, che chiameremo 01-blink.ino . int led = 13; int latency = 1000; void setup() { pinMode(led, OUTPUT); } void loop() { digitalWrite(led, HIGH); delay(latency); digitalWrite(led, LOW); delay(latency); } Clicchiamo ora sul pulsante Verifica dell'IDE; se \u00e8 tutto ok, potremo procedere a caricare lo sketch sulla scheda tramite il pulsante Carica . I pulsanti sono collocati in alto a sinistra nell'IDE, e sono mostrati nella figura successiva. Una volta caricato lo sketch sulla scheda, se tutto \u00e8 andato per il verso giusto, vedremo il led accendersi e spegnersi ogni secondo. Torniamo sul codice che abbiamo scritto nel nostro primo sketch, ed analizziamolo quindi pi\u00f9 nel dettaglio.","title":"Lo sketch (nel dettaglio)"},{"location":"02_intro_arduino/04_sketch/#linizializzazione-delle-variabili","text":"Il primo blocco di codice che vogliamo analizzare \u00e8 il seguente: int led = 13; int latency = 1000; Qui vediamo un semplice esempio di applicazione dei concetti che abbiamo gi\u00e0 illustrato quando abbiamo introdotto le variabili. Infatti, si tratta di due semplici inizializzazioni e dichiarazioni , rispettivamente della variabile di tipo intero led , il cui valore \u00e8 pari a 13, e della variabile (sempre di tipo intero) latency , il cui valore \u00e8 pari a 1000.","title":"L'inizializzazione delle variabili"},{"location":"02_intro_arduino/04_sketch/#il-setup","text":"Andiamo avanti con l'analisi del codice, e troviamo la nostra prima funzione , ovvero void setup() . Questa funzione viene chiamata all'inizio dell'esecuzione dello sketch, e serve ad impostare i valori e le operazioni iniziali. In questo caso, abbiamo gi\u00e0 inizializzato i valori di led e latency ; tuttavia, sarebbe stato ugualmente corretto modificare la funzione setup() per fare in modo che i valori iniziali di queste variabili fossero assegnati proprio all'interno di questa: void setup() { led = 13; latency = 1000; pinMode(led, OUTPUT); } All'interno della funzione setup() , \u00e8 possibile notare una ulteriore funzione, ovvero pinMode() . Vediamo assieme di cosa si tratta.","title":"Il setup()"},{"location":"02_intro_arduino/04_sketch/#la-funzione-pinmode","text":"La funzione pinMode() permette di impostare la modalit\u00e0 di funzionamento di un pin: in particolare, questo pu\u00f2 essere impostato come un output (ovvero come una uscita ) o un input (ovvero come un ingresso ). Quando il pin \u00e8 impostato come output, \u00e8 in grado di scrivere , o inviare in uscita, un certo valore di tensione; quando invece \u00e8 impostato come input, \u00e8 in grado di leggere , o ricevere in ingresso, un certo valore di tensione. Di conseguenza, pinMode() accetta due parametri: il primo \u00e8 il numero del pin di cui settare la modalit\u00e0 di funzionamento, mentre il secondo \u00e8 indicativo della modalit\u00e0 di funzionamento vera e propria. Per quello che riguarda il primo parametro, questo \u00e8 semplice da interpretare e ricordare, e pu\u00f2 assumere valori che vanno da 0 a 13 per i pin digitali, e da A0 ad A5 per i pin analogici. Il secondo parametro \u00e8 anch'esso estremamente semplice da ricordare, e pu\u00f2 essere INPUT o OUTPUT .","title":"La funzione pinMode()"},{"location":"02_intro_arduino/04_sketch/#il-loop","text":"Vediamo ora il corpo centrale dello sketch, costituito dalla funzione loop() , la quale esegue in maniera iterativa (ovvero ciclica) le istruzioni contenute al suo interno. In particolare, la nostra implementazione del loop contiene le seguenti istruzioni: void loop() { digitalWrite(led, HIGH); delay(latency); digitalWrite(led, LOW); delay(latency); } Approfondiamo le due nuove funzioni che abbiamo appena scritto, ovvero digitalWrite() e delay() .","title":"Il loop()"},{"location":"02_intro_arduino/04_sketch/#la-funzione-digitalwrite","text":"La funzione digitalWrite() viene utilizzata per applicare una certo valore di tensione ai capi di un pin digitale. In particolare, gli unici valori ammissibili sono alto ( HIGH ) e basso ( LOW ). Impostare un valore alto applicher\u00e0 ai capi del pin una tensione di 5 volt, la quale far\u00e0 accendere il LED; di converso, un valore basso applicher\u00e0 ai capi del pin un valore di tensione nullo, per cui il LED si spegner\u00e0. Il motivo per cui il LED si accende o spegne a seconda della tensione applicata \u00e8 semplice, ed \u00e8 riconducibile ai principi di base dell'elettronica. Infatti, dato che un capo del LED \u00e8 collegato a terra (GND), con tensione pari a 0 V, applicare una differenza di potenziale grazie ai 5 V del pin settato su HIGH provocher\u00e0 lo scorrere della corrente attraverso il LED. Ci\u00f2, ovviamente, non avverr\u00e0 qualora la differenza di potenziale tra GND e pin 13 sia nulla (ovvero, se entrambi sono a 0 V).","title":"La funzione digitalWrite()"},{"location":"02_intro_arduino/04_sketch/#la-funzione-delay","text":"L'altra funzione che abbiamo appena scoperto \u00e8 delay() . Questa funzione accetta come parametro in ingresso un unico valore, pari al tempo (in millisecondi) che lo sketch dovr\u00e0 attendere prima di proseguire nella sua esecuzione. In questo caso, quindi, scrivere: delay(latency); significa imporre un ritardo pari proprio al valore di latency (che ricordiamo essere pari a 1000) prima della prosecuzione nell'esecuzione dello sketch.","title":"La funzione delay()"},{"location":"02_intro_arduino/04_sketch/#ricapitoliamo","text":"Rivediamo assieme cosa abbiamo imparato in questo sketch. Per prima cosa: inizializziamo due variabili di tipo intero. Nel setup() : impostiamo il pin 13 in modalit\u00e0 OUTPUT . Nel loop() : per prima cosa, impostiamo il valore del pin 13 su HIGH , per cui il LED si accende; l'esecuzione del programma viene sospesa per un secondo; il valore del pin 13 viene quindi impostato a LOW , per cui il LED si spegne; l'esecuzione del programma viene sospesa per un secondo; il loop() ricomincia fino a che Arduino \u00e8 in funzione.","title":"Ricapitoliamo"},{"location":"03_elettronica/01_serie_parallelo/","text":"","title":"01 serie parallelo"},{"location":"03_elettronica/02_scopriamo_componenti/","text":"","title":"02 scopriamo componenti"},{"location":"03_elettronica/03_sensori_attuatori/","text":"","title":"03 sensori attuatori"},{"location":"03_elettronica/04_analogico_digitale/","text":"","title":"04 analogico digitale"},{"location":"04_intro_programmazione/01_variabili_funzioni/","text":"","title":"01 variabili funzioni"},{"location":"04_intro_programmazione/02_strutturata/","text":"","title":"02 strutturata"},{"location":"04_intro_programmazione/03_classi/","text":"","title":"03 classi"},{"location":"04_intro_programmazione/04_librerie/","text":"","title":"04 librerie"},{"location":"05_tool/01_monitor_seriale/","text":"","title":"01 monitor seriale"},{"location":"05_tool/02_tinkercad/","text":"","title":"02 tinkercad"},{"location":"06_sensori/01_temperatura/","text":"","title":"01 temperatura"},{"location":"06_sensori/02_gas/","text":"","title":"02 gas"},{"location":"06_sensori/03_accelerometro/","text":"","title":"03 accelerometro"},{"location":"07_attuatori/01_motori/","text":"","title":"01 motori"},{"location":"08_concetti_avanzati/01_web_service/","text":"","title":"01 web service"},{"location":"08_concetti_avanzati/02_mqtt/","text":"","title":"02 mqtt"}]}